
// AUTOGENERATED FILE. MODIFY IT AT YOUR OWN RISK.

using System;
using System.Collections.Generic;
using System.IO;
using System.Xml.Serialization;
using System.ComponentModel;

namespace game { 

	[XmlType("Game")]
	public class Game_Serialization : core.ReferenceSerializationObject
	{
		[XmlIgnore]
		game.Game This;

		public game.Globals_Serialization globals = new game.Globals_Serialization ();

		public gui.Gui_Serialization gui = new gui.Gui_Serialization ();

		public level.Levels_Serialization levels = new level.Levels_Serialization ();







		public override void CreateGuidToObjectMapping ( core.StringToObject stringToObject ) 
		{
			stringToObject.Add( GuidStr.ToOptGuid(), This );	
			CreateGuidToObjectMapping_Base( stringToObject );
		}
		protected override void CreateGuidToObjectMapping_Base ( core.StringToObject stringToObject )
		{
			base.CreateGuidToObjectMapping_Base( stringToObject );
			if ( globals != null )
				globals.CreateGuidToObjectMapping( stringToObject );
			if ( gui != null )
				gui.CreateGuidToObjectMapping( stringToObject );
			if ( levels != null )
				levels.CreateGuidToObjectMapping( stringToObject );
		}
		
		public override void FromSerializationConstruct( core.DataObject dataObject )
		{
			FromSerializationConstruct_Base( (game.Game)dataObject );
		}
		protected void FromSerializationConstruct_Base( game.Game dataObject )
		{
			This = dataObject;
			base.FromSerializationConstruct_Base( This );
			This.ProjectName = ProjectName;
			This.ProjectPath = ProjectPath;
			if ( globals != null )
			{
				This.globals.parent = This;
				globals.FromSerializationConstruct( This.globals );
			}
			if ( gui != null )
			{
				This.gui.parent = This;
				gui.FromSerializationConstruct( This.gui );
			}
			if ( levels != null )
			{
				This.levels.parent = This;
				levels.FromSerializationConstruct( This.levels );
			}
		}
		
		public override void FromSerialization( core.StringToObject stringToObject )
		{
			FromSerialization_Base( This, stringToObject );
		}
		protected void FromSerialization_Base( game.Game dataObject, core.StringToObject stringToObject )
		{
			base.FromSerialization_Base( This, stringToObject );	
			if ( globals != null )
				globals.FromSerialization( stringToObject );
			if ( gui != null )
				gui.FromSerialization( stringToObject );
			if ( levels != null )
				levels.FromSerialization( stringToObject );
		}
		
		public override void ToSerialization( core.DataObject dataObject )
		{
			ToSerialization_Base( (game.Game)dataObject );
		}
		protected void ToSerialization_Base( game.Game dataObject )
		{
			This = dataObject;	
			base.ToSerialization_Base( This );
			ProjectName = This.ProjectName;
			ProjectPath = This.ProjectPath;
			if ( This.globals != null )
			{
				globals = data.Serialization.ConstructSerialization<game.Globals_Serialization>( This.globals.GetType() );
				globals.parent = this;
				globals.ToSerialization( This.globals );
			}
			if ( This.gui != null )
			{
				gui = data.Serialization.ConstructSerialization<gui.Gui_Serialization>( This.gui.GetType() );
				gui.parent = this;
				gui.ToSerialization( This.gui );
			}
			if ( This.levels != null )
			{
				levels = data.Serialization.ConstructSerialization<level.Levels_Serialization>( This.levels.GetType() );
				levels.parent = this;
				levels.ToSerialization( This.levels );
			}
		}
		
		public override void FileStorage_FromSerializationConstruct()
		{
			base.FileStorage_FromSerializationConstruct();
			globals.FileStorage_FromSerializationConstruct();
			gui.FileStorage_FromSerializationConstruct();
			levels.FileStorage_FromSerializationConstruct();
		}
		public override void FileStorage_FromSerialization( core.StringToObject stringToObject )
		{
			base.FileStorage_FromSerialization( stringToObject );
			globals.FileStorage_FromSerialization( stringToObject );
			gui.FileStorage_FromSerialization( stringToObject );
			levels.FileStorage_FromSerialization( stringToObject );
		}
		public override void FileStorage_ToSerialization()
		{
			base.FileStorage_ToSerialization();
			globals.FileStorage_ToSerialization();
			gui.FileStorage_ToSerialization();
			levels.FileStorage_ToSerialization();
		}
		
		[XmlIgnore] 
		public string ProjectPath;
		[XmlIgnore] 
		private string ProjectName;
		
		public const string	ProjectExtension = ".proj";
		
		[XmlIgnore] 
		private string FullName { get { return ProjectPath + @"\" + ProjectName; } }
		[XmlIgnore] 
		private string FullNameExtension { get { return FullName + ProjectExtension; } }
		
		static public game.Game_Serialization ProjectLoad(string projectFilenameFull)
		{
			string projectPath = Path.GetDirectoryName( projectFilenameFull );
			string projectName = Path.GetFileNameWithoutExtension( projectFilenameFull );
		
			FileStream filestream = new FileStream(projectPath + @"\" + projectName + ProjectExtension, FileMode.Open, FileAccess.Read);
			XmlSerializer xmlSerializer = new XmlSerializer(typeof( game.Game_Serialization ), data.Serialization.Types );
			game.Game_Serialization project = (game.Game_Serialization)xmlSerializer.Deserialize(filestream);
			filestream.Close();
		
			project.ProjectPath = projectPath;
			project.ProjectName = projectName;
		
			return project;
		}
		
		public void ProjectSave()
		{
			XmlSerializer xmlSerializer = new XmlSerializer(typeof(game.Game_Serialization), data.Serialization.Types );
			TextWriter textWriter = new StreamWriter(FullNameExtension);
			xmlSerializer.Serialize(textWriter, this);
			textWriter.Close();
		}
		
		public void ProjectSaveAs(string projectFilenameFull)
		{
			string projectPath = Path.GetDirectoryName( projectFilenameFull );
			string projectName = Path.GetFileNameWithoutExtension( projectFilenameFull );
			
			XmlSerializer xmlSerializer = new XmlSerializer(typeof(game.Game_Serialization), data.Serialization.Types );
			TextWriter textWriter = new StreamWriter(projectPath + @"\" + projectName + ProjectExtension);
			xmlSerializer.Serialize(textWriter, this);
			textWriter.Close();
		}
		
		public override void Load()
		{
			globals.Load();
			gui.Load();
			levels.Load();
		}
		
		public override void Save()
		{
			ProjectSave();
			globals.CreateDirectory(ProjectPath);
			globals.Save();
			gui.CreateDirectory(ProjectPath);
			gui.Save();
			levels.CreateDirectory(ProjectPath);
			levels.Save();
		}
		
		public override void SaveAs(string projectFilenameFull)
		{
			string projectPath = Path.GetDirectoryName( projectFilenameFull );
			ProjectSaveAs( projectFilenameFull );
			globals.CreateDirectory(projectPath);
			globals.SaveAs( projectPath );
			gui.CreateDirectory(projectPath);
			gui.SaveAs( projectPath );
			levels.CreateDirectory(projectPath);
			levels.SaveAs( projectPath );
		}
		
		static public game.Game_Serialization ProjectCreate(string projectFilenameFull)
		{
			string projectPath = Path.GetDirectoryName( projectFilenameFull );
			string projectName = Path.GetFileNameWithoutExtension( projectFilenameFull );
		
			game.Game_Serialization project = new game.Game_Serialization();
			project.ProjectName = projectName;
			project.ProjectPath = projectPath;
			return project;
		}
		
		
		static public game.Game_Serialization ProjectToSerialization( game.Game data )
		{
			game.Game_Serialization project = new game.Game_Serialization();	
			project.ToSerialization( data );
			return project;
		}
		
	}
	[XmlType("Game_Sound")]
	public class Game_Serialization_Sound : core.ReferencePartialObject
	{
		[XmlIgnore]
		game.Game This;

		public level.Levels_Serialization_Sound levels = new level.Levels_Serialization_Sound ();

		
		public override void FromSerializationBind( core.DataObject dataObject, core.StringToObject stringToObject )
		{
			FromSerializationBind_Base( (game.Game)dataObject, stringToObject );
		}
		protected void FromSerializationBind_Base( game.Game dataObject, core.StringToObject stringToObject )
		{
			This = dataObject;
			base.FromSerializationBind_Base( This, stringToObject );
			if ( levels != null )
			{
				level.Levels datalevels = This.levels;
				if ( levels.GuidStr.Length > 0 )
					datalevels = stringToObject.Fixup < level.Levels >( levels.GuidStr.ToOptGuid() );
				levels.FromSerializationBind( datalevels, stringToObject );
			}
		}
		
		public override void FromSerialization( core.StringToObject stringToObject )
		{
			FromSerialization_Base( This, stringToObject );
		}
		protected void FromSerialization_Base( game.Game dataObject, core.StringToObject stringToObject )
		{
			base.FromSerialization_Base( This, stringToObject );	
			if ( levels != null )
				levels.FromSerialization( stringToObject );
		}
		
		public override void ToSerialization( core.DataObject dataObject )
		{
			ToSerialization_Base( (game.Game)dataObject );
		}
		protected void ToSerialization_Base( game.Game dataObject )
		{
			This = dataObject;	
			base.ToSerialization_Base( This );
			ProjectName = This.ProjectName;
			ProjectPath = This.ProjectPath;
			if ( This.levels != null )
			{
				levels = data.Serialization.ConstructPartial_Sound < level.Levels_Serialization_Sound > ( This.levels.GetType() );
				levels.parent = this;
				levels.ToSerialization( This.levels );
			}
		}
		
		public override void FileStorage_FromSerializationBind( core.StringToObject stringToObject )
		{
			base.FileStorage_FromSerializationBind( stringToObject );
			levels.FileStorage_FromSerializationBind( stringToObject );
		}
		public override void FileStorage_FromSerialization( core.StringToObject stringToObject )
		{
			base.FileStorage_FromSerialization( stringToObject );
			levels.FileStorage_FromSerialization( stringToObject );
		}
		public override void FileStorage_ToSerialization()
		{
			base.FileStorage_ToSerialization();
			levels.FileStorage_ToSerialization();
		}
		
		[XmlIgnore] 
		public string ProjectPath;
		[XmlIgnore] 
		private string ProjectName;
		
		public const string	ProjectExtension = ".proj_snd";
		
		[XmlIgnore] 
		private string FullName { get { return ProjectPath + @"\" + ProjectName; } }
		[XmlIgnore] 
		private string FullNameExtension { get { return FullName + ProjectExtension; } }
		
		static public game.Game_Serialization_Sound ProjectLoad(string projectFilenameFull)
		{
			string projectPath = Path.GetDirectoryName( projectFilenameFull );
			string projectName = Path.GetFileNameWithoutExtension( projectFilenameFull );
		
			FileStream filestream = new FileStream(projectPath + @"\" + projectName + ProjectExtension, FileMode.Open, FileAccess.Read);
			XmlSerializer xmlSerializer = new XmlSerializer(typeof( game.Game_Serialization_Sound ), data.Serialization.Types_Sound );
			game.Game_Serialization_Sound project = (game.Game_Serialization_Sound)xmlSerializer.Deserialize(filestream);
			filestream.Close();
		
			project.ProjectPath = projectPath;
			project.ProjectName = projectName;
		
			return project;
		}
		
		public void ProjectSave()
		{
			XmlSerializer xmlSerializer = new XmlSerializer(typeof(game.Game_Serialization_Sound), data.Serialization.Types_Sound );
			TextWriter textWriter = new StreamWriter(FullNameExtension);
			xmlSerializer.Serialize(textWriter, this);
			textWriter.Close();
		}
		
		public void ProjectSaveAs(string projectFilenameFull)
		{
			string projectPath = Path.GetDirectoryName( projectFilenameFull );
			string projectName = Path.GetFileNameWithoutExtension( projectFilenameFull );
			
			XmlSerializer xmlSerializer = new XmlSerializer(typeof(game.Game_Serialization_Sound), data.Serialization.Types_Sound );
			TextWriter textWriter = new StreamWriter(projectPath + @"\" + projectName + ProjectExtension);
			xmlSerializer.Serialize(textWriter, this);
			textWriter.Close();
		}
		
		public override void Load()
		{
			levels.Load();
		}
		
		public override void Save()
		{
			ProjectSave();
			levels.CreateDirectory(ProjectPath);
			levels.Save();
		}
		
		public override void SaveAs(string projectFilenameFull)
		{
			string projectPath = Path.GetDirectoryName( projectFilenameFull );
			ProjectSaveAs( projectFilenameFull );
			levels.CreateDirectory(projectPath);
			levels.SaveAs( projectPath );
		}
		
		
		static public game.Game_Serialization_Sound ProjectToSerialization( game.Game data )
		{
			game.Game_Serialization_Sound project = new game.Game_Serialization_Sound();	
			project.ToSerialization( data );
			return project;
		}
		
	}
	[XmlType("Game_SpecialFX")]
	public class Game_Serialization_SpecialFX : core.ReferencePartialObject
	{
		[XmlIgnore]
		game.Game This;

		public level.Levels_Serialization_SpecialFX levels = new level.Levels_Serialization_SpecialFX ();

		
		public override void FromSerializationBind( core.DataObject dataObject, core.StringToObject stringToObject )
		{
			FromSerializationBind_Base( (game.Game)dataObject, stringToObject );
		}
		protected void FromSerializationBind_Base( game.Game dataObject, core.StringToObject stringToObject )
		{
			This = dataObject;
			base.FromSerializationBind_Base( This, stringToObject );
			if ( levels != null )
			{
				level.Levels datalevels = This.levels;
				if ( levels.GuidStr.Length > 0 )
					datalevels = stringToObject.Fixup < level.Levels >( levels.GuidStr.ToOptGuid() );
				levels.FromSerializationBind( datalevels, stringToObject );
			}
		}
		
		public override void FromSerialization( core.StringToObject stringToObject )
		{
			FromSerialization_Base( This, stringToObject );
		}
		protected void FromSerialization_Base( game.Game dataObject, core.StringToObject stringToObject )
		{
			base.FromSerialization_Base( This, stringToObject );	
			if ( levels != null )
				levels.FromSerialization( stringToObject );
		}
		
		public override void ToSerialization( core.DataObject dataObject )
		{
			ToSerialization_Base( (game.Game)dataObject );
		}
		protected void ToSerialization_Base( game.Game dataObject )
		{
			This = dataObject;	
			base.ToSerialization_Base( This );
			ProjectName = This.ProjectName;
			ProjectPath = This.ProjectPath;
			if ( This.levels != null )
			{
				levels = data.Serialization.ConstructPartial_SpecialFX < level.Levels_Serialization_SpecialFX > ( This.levels.GetType() );
				levels.parent = this;
				levels.ToSerialization( This.levels );
			}
		}
		
		public override void FileStorage_FromSerializationBind( core.StringToObject stringToObject )
		{
			base.FileStorage_FromSerializationBind( stringToObject );
			levels.FileStorage_FromSerializationBind( stringToObject );
		}
		public override void FileStorage_FromSerialization( core.StringToObject stringToObject )
		{
			base.FileStorage_FromSerialization( stringToObject );
			levels.FileStorage_FromSerialization( stringToObject );
		}
		public override void FileStorage_ToSerialization()
		{
			base.FileStorage_ToSerialization();
			levels.FileStorage_ToSerialization();
		}
		
		[XmlIgnore] 
		public string ProjectPath;
		[XmlIgnore] 
		private string ProjectName;
		
		public const string	ProjectExtension = ".proj_sfx";
		
		[XmlIgnore] 
		private string FullName { get { return ProjectPath + @"\" + ProjectName; } }
		[XmlIgnore] 
		private string FullNameExtension { get { return FullName + ProjectExtension; } }
		
		static public game.Game_Serialization_SpecialFX ProjectLoad(string projectFilenameFull)
		{
			string projectPath = Path.GetDirectoryName( projectFilenameFull );
			string projectName = Path.GetFileNameWithoutExtension( projectFilenameFull );
		
			FileStream filestream = new FileStream(projectPath + @"\" + projectName + ProjectExtension, FileMode.Open, FileAccess.Read);
			XmlSerializer xmlSerializer = new XmlSerializer(typeof( game.Game_Serialization_SpecialFX ), data.Serialization.Types_SpecialFX );
			game.Game_Serialization_SpecialFX project = (game.Game_Serialization_SpecialFX)xmlSerializer.Deserialize(filestream);
			filestream.Close();
		
			project.ProjectPath = projectPath;
			project.ProjectName = projectName;
		
			return project;
		}
		
		public void ProjectSave()
		{
			XmlSerializer xmlSerializer = new XmlSerializer(typeof(game.Game_Serialization_SpecialFX), data.Serialization.Types_SpecialFX );
			TextWriter textWriter = new StreamWriter(FullNameExtension);
			xmlSerializer.Serialize(textWriter, this);
			textWriter.Close();
		}
		
		public void ProjectSaveAs(string projectFilenameFull)
		{
			string projectPath = Path.GetDirectoryName( projectFilenameFull );
			string projectName = Path.GetFileNameWithoutExtension( projectFilenameFull );
			
			XmlSerializer xmlSerializer = new XmlSerializer(typeof(game.Game_Serialization_SpecialFX), data.Serialization.Types_SpecialFX );
			TextWriter textWriter = new StreamWriter(projectPath + @"\" + projectName + ProjectExtension);
			xmlSerializer.Serialize(textWriter, this);
			textWriter.Close();
		}
		
		public override void Load()
		{
			levels.Load();
		}
		
		public override void Save()
		{
			ProjectSave();
			levels.CreateDirectory(ProjectPath);
			levels.Save();
		}
		
		public override void SaveAs(string projectFilenameFull)
		{
			string projectPath = Path.GetDirectoryName( projectFilenameFull );
			ProjectSaveAs( projectFilenameFull );
			levels.CreateDirectory(projectPath);
			levels.SaveAs( projectPath );
		}
		
		
		static public game.Game_Serialization_SpecialFX ProjectToSerialization( game.Game data )
		{
			game.Game_Serialization_SpecialFX project = new game.Game_Serialization_SpecialFX();	
			project.ToSerialization( data );
			return project;
		}
		
	}

	public static class GameExt
	{
		public static string ProjectExtension( this game.Game nullthis )
		{
			return ".proj";
		}
		
		public static game.Game ProjectCreate( this game.Game nullthis, string projectFilenameFull)
		{
			game.Game dataProject = new game.Game();
		
			game.Game_Serialization project = game.Game_Serialization.ProjectCreate( projectFilenameFull );
			project.FromSerializationConstruct( dataProject );
		
			core.StringToObject stringToObject = new core.StringToObject();
			project.CreateGuidToObjectMapping( stringToObject );
		
			project.FromSerialization( stringToObject );	
		
			return dataProject;
		}
		
		public static game.Game ProjectLoad( this game.Game nullthis, string projectFilenameFull)
		{
			game.Game_Serialization project = game.Game_Serialization.ProjectLoad( projectFilenameFull );
			game.Game dataProject = new game.Game();
			project.FromSerializationConstruct( dataProject );
			
			core.StringToObject stringToObject = new core.StringToObject();
			project.CreateGuidToObjectMapping( stringToObject );
			project.FromSerialization( stringToObject );

			game.Game_Serialization_Sound projectSound = game.Game_Serialization_Sound.ProjectLoad( projectFilenameFull );
			projectSound.FromSerializationBind( dataProject, stringToObject );
			projectSound.FromSerialization( stringToObject );

			game.Game_Serialization_SpecialFX projectSpecialFX = game.Game_Serialization_SpecialFX.ProjectLoad( projectFilenameFull );
			projectSpecialFX.FromSerializationBind( dataProject, stringToObject );
			projectSpecialFX.FromSerialization( stringToObject );

			return dataProject;
		}
		
		public static void ProjectSave( this game.Game mainProject )
		{
			game.Game_Serialization project = game.Game_Serialization.ProjectToSerialization( mainProject );
			project.ProjectSave();
			game.Game_Serialization_Sound projectSound = game.Game_Serialization_Sound.ProjectToSerialization( mainProject );
			projectSound.ProjectSave();
			game.Game_Serialization_SpecialFX projectSpecialFX = game.Game_Serialization_SpecialFX.ProjectToSerialization( mainProject );
			projectSpecialFX.ProjectSave();
		}
		
		public static void ProjectSaveAs( this game.Game mainProject, string projectFilenameFull )
		{
			game.Game_Serialization project = game.Game_Serialization.ProjectToSerialization( mainProject );
			project.ProjectSaveAs(projectFilenameFull);
			game.Game_Serialization_Sound projectSound = game.Game_Serialization_Sound.ProjectToSerialization( mainProject );
			projectSound.ProjectSaveAs(projectFilenameFull);
			game.Game_Serialization_SpecialFX projectSpecialFX = game.Game_Serialization_SpecialFX.ProjectToSerialization( mainProject );
			projectSpecialFX.ProjectSaveAs(projectFilenameFull);
		}
		
		public static void Load( this game.Game mainProject )
		{
			
			game.Game_Serialization project = game.Game_Serialization.ProjectToSerialization( mainProject );
			project.Load();
			project.FileStorage_FromSerializationConstruct();
			
			core.StringToObject stringToObject = new core.StringToObject();
			project.CreateGuidToObjectMapping( stringToObject );
			
			project.FileStorage_FromSerialization( stringToObject );
			
			game.Game_Serialization_Sound projectSound = game.Game_Serialization_Sound.ProjectToSerialization( mainProject );
			projectSound.Load();
			projectSound.FileStorage_FromSerializationBind( stringToObject );
			projectSound.FileStorage_FromSerialization( stringToObject );
			
			game.Game_Serialization_SpecialFX projectSpecialFX = game.Game_Serialization_SpecialFX.ProjectToSerialization( mainProject );
			projectSpecialFX.Load();
			projectSpecialFX.FileStorage_FromSerializationBind( stringToObject );
			projectSpecialFX.FileStorage_FromSerialization( stringToObject );
		}
		
		public static void Save( this game.Game mainProject )
		{
			
			game.Game_Serialization project = game.Game_Serialization.ProjectToSerialization( mainProject );
			project.FileStorage_ToSerialization();
			project.Save();
			
			game.Game_Serialization_Sound projectSound = game.Game_Serialization_Sound.ProjectToSerialization( mainProject );
			projectSound.FileStorage_ToSerialization();
			projectSound.Save();
			
			game.Game_Serialization_SpecialFX projectSpecialFX = game.Game_Serialization_SpecialFX.ProjectToSerialization( mainProject );
			projectSpecialFX.FileStorage_ToSerialization();
			projectSpecialFX.Save();
		}
		
		public static void SaveAs( this game.Game mainProject, string projectFilenameFull )
		{
			
			game.Game_Serialization project = game.Game_Serialization.ProjectToSerialization( mainProject );
			project.FileStorage_ToSerialization();
			project.SaveAs(projectFilenameFull);
			
			game.Game_Serialization_Sound projectSound = game.Game_Serialization_Sound.ProjectToSerialization( mainProject );
			projectSound.FileStorage_ToSerialization();
			projectSound.SaveAs(projectFilenameFull);
			
			game.Game_Serialization_SpecialFX projectSpecialFX = game.Game_Serialization_SpecialFX.ProjectToSerialization( mainProject );
			projectSpecialFX.FileStorage_ToSerialization();
			projectSpecialFX.SaveAs(projectFilenameFull);
		}
	} // end of static class GameExt

} /* namespace game */ 
