
// AUTOGENERATED FILE. MODIFY IT AT YOUR OWN RISK.

using System;
using System.Collections.Generic;
using System.IO;
using System.Xml.Serialization;
using System.ComponentModel;

namespace metadata { 

	[XmlType("MetadataFile")]
	public class MetadataFile_Serialization : core.ReferenceSerializationObject
	{
		[XmlIgnore]
		metadata.MetadataFile This;

		[XmlAttribute]
		[DefaultValue("File")]
		public string Name = "File";

		[XmlIgnore]
		public metadata.MetadataFolder_Serialization Parent;

		[XmlAttribute]
		[DefaultValue("")]
		public string Namespace = "";

		[XmlIgnore]
		public metadata.MetadataFileContent_Serialization Content;

		[XmlAttribute]
		[DefaultValue(true)]
		public bool GenerateGui = true;

		[XmlAttribute]
		[DefaultValue(true)]
		public bool GenerateSerialization = true;

		public override void CreateGuidToObjectMapping ( core.StringToObject stringToObject ) 
		{
			stringToObject.Add( GuidStr.ToOptGuid(), This );	
			CreateGuidToObjectMapping_Base( stringToObject );
		}
		protected override void CreateGuidToObjectMapping_Base ( core.StringToObject stringToObject )
		{
			base.CreateGuidToObjectMapping_Base( stringToObject );
			if ( Content != null )
				Content.CreateGuidToObjectMapping( stringToObject );
		}
		
		public override void FromSerializationConstruct( core.DataObject dataObject )
		{
			FromSerializationConstruct_Base( (metadata.MetadataFile)dataObject );
		}
		protected void FromSerializationConstruct_Base( metadata.MetadataFile dataObject )
		{
			This = dataObject;
			base.FromSerializationConstruct_Base( This );
		}
		
		public override void FromSerialization( core.StringToObject stringToObject )
		{
			FromSerialization_Base( This, stringToObject );
		}
		protected void FromSerialization_Base( metadata.MetadataFile dataObject, core.StringToObject stringToObject )
		{
			base.FromSerialization_Base( This, stringToObject );	
			This.Name = Name;
			This.Namespace = Namespace;
			This.GenerateGui = GenerateGui;
			This.GenerateSerialization = GenerateSerialization;
		}
		
		public override void ToSerialization( core.DataObject dataObject )
		{
			ToSerialization_Base( (metadata.MetadataFile)dataObject );
		}
		protected void ToSerialization_Base( metadata.MetadataFile dataObject )
		{
			This = dataObject;	
			base.ToSerialization_Base( This );
			Name = This.Name;
			Namespace = This.Namespace;
			GenerateGui = This.GenerateGui;
			GenerateSerialization = This.GenerateSerialization;
		}
		
		public override void FileStorage_FromSerializationConstruct()
		{
			base.FileStorage_FromSerializationConstruct();
			if ( Content != null )
			{
				This.Content = metadata.Serialization.ConstructData<metadata.MetadataFileContent>( Content.GetType() );
				This.Content.Parent = This;
				Content.FromSerializationConstruct( This.Content );
			}
		}
		public override void FileStorage_FromSerialization( core.StringToObject stringToObject )
		{
			base.FileStorage_FromSerialization( stringToObject );
			if ( Content != null )
				Content.FromSerialization( stringToObject );
		}
		public override void FileStorage_ToSerialization()
		{
			base.FileStorage_ToSerialization();
			if ( This.Content != null )
			{
				Content = new metadata.MetadataFileContent_Serialization();
				Content.Parent = this;
				Content.ToSerialization( This.Content );
			}
		}
		
		[XmlIgnore]
		public string RelativeName { get { return Parent.RelativeName + @"\" + Name; } }
		[XmlIgnore]
		public string RelativeNameExtension { get { return RelativeName + FileExtension; } }
		[XmlIgnore]
		public string FullName { get { return Parent.FullName + @"\" + Name; } }
		[XmlIgnore]
		public string FullNameExtension { get { return FullName + FileExtension; } }
		public const string FileExtension = ".metadata";
		[XmlIgnore]
		public string RootFolderRelativeName { get { return Parent.RootFolderRelativeName + Name; } }
		
		public override void Load()
		{
			base.Load();
			if ( System.IO.File.Exists( FullNameExtension ) )
			{
				FileStream filestream = new FileStream(FullNameExtension, FileMode.Open, FileAccess.Read );
				XmlSerializer xmlSerializer = new XmlSerializer(typeof(metadata.MetadataFileContent_Serialization), metadata.Serialization.Types );
				Content = (metadata.MetadataFileContent_Serialization)xmlSerializer.Deserialize(filestream);
				filestream.Close();
			}
		}
		
		public override void Save()
		{
			base.Save();
			if ( Content != null )
			{
				XmlSerializer xmlSerializer = new XmlSerializer(typeof(metadata.MetadataFileContent_Serialization), metadata.Serialization.Types );
				TextWriter textWriter = new StreamWriter(FullNameExtension);
				xmlSerializer.Serialize(textWriter, Content);
				textWriter.Close();
			}
		}
		
		public override void SaveAs( string projectPath )
		{
			base.SaveAs( projectPath );
			if ( Content != null )
			{
				XmlSerializer xmlSerializer = new XmlSerializer(typeof(metadata.MetadataFileContent_Serialization), metadata.Serialization.Types );
				TextWriter textWriter = new StreamWriter( projectPath + @"\" + RelativeNameExtension );
				xmlSerializer.Serialize(textWriter, Content);
				textWriter.Close();
			}
		}
	}

	[XmlType("MetadataFilesCollection")]
	public class MetadataFilesCollection_Serialization : core.SerializationCollectionOf <metadata.MetadataFile_Serialization>
	{
		[XmlIgnore]
		metadata.MetadataFilesCollection This;

		public override void CreateGuidToObjectMapping ( core.StringToObject stringToObject ) 
		{
			CreateGuidToObjectMapping_Base( stringToObject );
		}
		protected override void CreateGuidToObjectMapping_Base ( core.StringToObject stringToObject )
		{
			base.CreateGuidToObjectMapping_Base( stringToObject );
			foreach( metadata.MetadataFile_Serialization collectionElement in Values )
				collectionElement.CreateGuidToObjectMapping( stringToObject );
		}
		
		public override void FromSerializationConstruct( core.DataObject dataObject )
		{
			FromSerializationConstruct_Base( (metadata.MetadataFilesCollection)dataObject );
		}
		protected void FromSerializationConstruct_Base( metadata.MetadataFilesCollection dataObject )
		{
			This = dataObject;
			base.FromSerializationConstruct_Base( This );
			This.Clear();
			foreach( metadata.MetadataFile_Serialization collectionElement in Values )
			{
				metadata.MetadataFile dataCollectionElement = metadata.Serialization.ConstructData<metadata.MetadataFile>( collectionElement.GetType() );
				collectionElement.FromSerializationConstruct( dataCollectionElement );
				This.Add( dataCollectionElement );
			}
		}
		
		public override void FromSerialization( core.StringToObject stringToObject )
		{
			FromSerialization_Base( This, stringToObject );
		}
		protected void FromSerialization_Base( metadata.MetadataFilesCollection dataObject, core.StringToObject stringToObject )
		{
			base.FromSerialization_Base( This, stringToObject );	
			foreach( metadata.MetadataFile_Serialization collectionElement in Values )
				collectionElement.FromSerialization( stringToObject );
		}
		
		public override void ToSerialization( core.DataObject dataObject )
		{
			ToSerialization_Base( (metadata.MetadataFilesCollection)dataObject );
		}
		protected void ToSerialization_Base( metadata.MetadataFilesCollection dataObject )
		{
			This = dataObject;	
			base.ToSerialization_Base( This );
			Clear();
			foreach( metadata.MetadataFile dataCollectionElement in This )
			{
				metadata.MetadataFile_Serialization collectionElement = metadata.Serialization.ConstructSerialization<metadata.MetadataFile_Serialization>( dataCollectionElement.GetType() );
				collectionElement.ToSerialization( dataCollectionElement );	
				Add( collectionElement );
			}
		}
		
	}

	[XmlType("MetadataFolder")]
	public class MetadataFolder_Serialization : core.ReferenceSerializationObject
	{
		[XmlIgnore]
		metadata.MetadataFolder This;

		[XmlAttribute]
		[DefaultValue("Folder")]
		public string Name = "Folder";

		[XmlIgnore]
		public metadata.MetadataFolder_Serialization Parent;

		[XmlIgnore]
		public metadata.MetadataProject_Serialization ParentProject;

		[XmlAttribute]
		[DefaultValue("")]
		public string Namespace = "";

		[XmlArray]
		[XmlArrayItem(typeof(metadata.MetadataFolder_Serialization),ElementName = "MetadataFolder")]
		public metadata.MetadataFoldersCollection_Serialization Folders = new metadata.MetadataFoldersCollection_Serialization();

		[XmlArray]
		[XmlArrayItem(typeof(metadata.MetadataFile_Serialization),ElementName = "MetadataFile")]
		public metadata.MetadataFilesCollection_Serialization Files = new metadata.MetadataFilesCollection_Serialization();

		public override void CreateGuidToObjectMapping ( core.StringToObject stringToObject ) 
		{
			stringToObject.Add( GuidStr.ToOptGuid(), This );	
			CreateGuidToObjectMapping_Base( stringToObject );
		}
		protected override void CreateGuidToObjectMapping_Base ( core.StringToObject stringToObject )
		{
			base.CreateGuidToObjectMapping_Base( stringToObject );
			if ( Folders != null )
				Folders.CreateGuidToObjectMapping( stringToObject );
			if ( Files != null )
				Files.CreateGuidToObjectMapping( stringToObject );
		}
		
		public override void FromSerializationConstruct( core.DataObject dataObject )
		{
			FromSerializationConstruct_Base( (metadata.MetadataFolder)dataObject );
		}
		protected void FromSerializationConstruct_Base( metadata.MetadataFolder dataObject )
		{
			This = dataObject;
			base.FromSerializationConstruct_Base( This );
			Folders.FromSerializationConstruct( This.Folders );
			foreach( metadata.MetadataFolder collectionElement in This.Folders )
			{
				collectionElement.Parent = This;
			}
			Files.FromSerializationConstruct( This.Files );
			foreach( metadata.MetadataFile collectionElement in This.Files )
			{
				collectionElement.Parent = This;
			}
		}
		
		public override void FromSerialization( core.StringToObject stringToObject )
		{
			FromSerialization_Base( This, stringToObject );
		}
		protected void FromSerialization_Base( metadata.MetadataFolder dataObject, core.StringToObject stringToObject )
		{
			base.FromSerialization_Base( This, stringToObject );	
			This.Name = Name;
			This.Namespace = Namespace;
			Folders.FromSerialization( stringToObject );
			Files.FromSerialization( stringToObject );
		}
		
		public override void ToSerialization( core.DataObject dataObject )
		{
			ToSerialization_Base( (metadata.MetadataFolder)dataObject );
		}
		protected void ToSerialization_Base( metadata.MetadataFolder dataObject )
		{
			This = dataObject;	
			base.ToSerialization_Base( This );
			Name = This.Name;
			Namespace = This.Namespace;
			Folders.ToSerialization( This.Folders );
			foreach ( metadata.MetadataFolder_Serialization collectionElement in Folders )
			{
				collectionElement.Parent = this;
			}
			Files.ToSerialization( This.Files );
			foreach ( metadata.MetadataFile_Serialization collectionElement in Files )
			{
				collectionElement.Parent = this;
			}
		}
		
		public override void FileStorage_FromSerializationConstruct()
		{
			base.FileStorage_FromSerializationConstruct();
			foreach( metadata.MetadataFolder_Serialization collectionElement in Folders )
				collectionElement.FileStorage_FromSerializationConstruct();
			foreach( metadata.MetadataFile_Serialization collectionElement in Files )
				collectionElement.FileStorage_FromSerializationConstruct();
		}
		public override void FileStorage_FromSerialization( core.StringToObject stringToObject )
		{
			base.FileStorage_FromSerialization( stringToObject );
			foreach( metadata.MetadataFolder_Serialization collectionElement in Folders )
				collectionElement.FileStorage_FromSerialization( stringToObject );
			foreach( metadata.MetadataFile_Serialization collectionElement in Files )
				collectionElement.FileStorage_FromSerialization( stringToObject );
		}
		public override void FileStorage_ToSerialization()
		{
			base.FileStorage_ToSerialization();
			foreach( metadata.MetadataFolder_Serialization collectionElement in Folders )
				collectionElement.FileStorage_ToSerialization();
			foreach( metadata.MetadataFile_Serialization collectionElement in Files )
				collectionElement.FileStorage_ToSerialization();
		}
		[XmlIgnore]
		public string RelativeName { get { return (Parent == null ? "" : Parent.RelativeName + @"\") + Name; } }
		[XmlIgnore]
		public string RootFolderRelativeName { get { return Parent == null ? "" : Parent.RootFolderRelativeName + Name + @"\"; } }
		[XmlIgnore]
		public string FullName { get { return (Parent == null ? ParentProject.ProjectPath : Parent.FullName ) + @"\" + Name; } }
		
		public override void CreateDirectory(string projectPath)
		{
			Directory.CreateDirectory(projectPath + @"\"+ RelativeName);
			CreateDirectory_Base( projectPath );
		}
		protected override void CreateDirectory_Base(string projectPath)
		{
			base.CreateDirectory_Base( projectPath );
			foreach( metadata.MetadataFolder_Serialization collectionElement in Folders )
				collectionElement.CreateDirectory(projectPath);
		}
		
		public override void Load()
		{
			base.Load();
			foreach( metadata.MetadataFolder_Serialization collectionElement in Folders )
				collectionElement.Load();		
			foreach( metadata.MetadataFile_Serialization collectionElement in Files )
				collectionElement.Load();		
		}
		
		public override void Save()
		{
			base.Save();
			foreach( metadata.MetadataFolder_Serialization collectionElement in Folders )
				collectionElement.Save();		
			foreach( metadata.MetadataFile_Serialization collectionElement in Files )
				collectionElement.Save();		
		}
		
		public override void SaveAs(string projectPath)
		{
			base.SaveAs( projectPath );
			foreach( metadata.MetadataFolder_Serialization collectionElement in Folders )
				collectionElement.SaveAs( projectPath );		
			foreach( metadata.MetadataFile_Serialization collectionElement in Files )
				collectionElement.SaveAs( projectPath );		
		}
	}

	[XmlType("MetadataFoldersCollection")]
	public class MetadataFoldersCollection_Serialization : core.SerializationCollectionOf <metadata.MetadataFolder_Serialization>
	{
		[XmlIgnore]
		metadata.MetadataFoldersCollection This;

		public override void CreateGuidToObjectMapping ( core.StringToObject stringToObject ) 
		{
			CreateGuidToObjectMapping_Base( stringToObject );
		}
		protected override void CreateGuidToObjectMapping_Base ( core.StringToObject stringToObject )
		{
			base.CreateGuidToObjectMapping_Base( stringToObject );
			foreach( metadata.MetadataFolder_Serialization collectionElement in Values )
				collectionElement.CreateGuidToObjectMapping( stringToObject );
		}
		
		public override void FromSerializationConstruct( core.DataObject dataObject )
		{
			FromSerializationConstruct_Base( (metadata.MetadataFoldersCollection)dataObject );
		}
		protected void FromSerializationConstruct_Base( metadata.MetadataFoldersCollection dataObject )
		{
			This = dataObject;
			base.FromSerializationConstruct_Base( This );
			This.Clear();
			foreach( metadata.MetadataFolder_Serialization collectionElement in Values )
			{
				metadata.MetadataFolder dataCollectionElement = metadata.Serialization.ConstructData<metadata.MetadataFolder>( collectionElement.GetType() );
				collectionElement.FromSerializationConstruct( dataCollectionElement );
				This.Add( dataCollectionElement );
			}
		}
		
		public override void FromSerialization( core.StringToObject stringToObject )
		{
			FromSerialization_Base( This, stringToObject );
		}
		protected void FromSerialization_Base( metadata.MetadataFoldersCollection dataObject, core.StringToObject stringToObject )
		{
			base.FromSerialization_Base( This, stringToObject );	
			foreach( metadata.MetadataFolder_Serialization collectionElement in Values )
				collectionElement.FromSerialization( stringToObject );
		}
		
		public override void ToSerialization( core.DataObject dataObject )
		{
			ToSerialization_Base( (metadata.MetadataFoldersCollection)dataObject );
		}
		protected void ToSerialization_Base( metadata.MetadataFoldersCollection dataObject )
		{
			This = dataObject;	
			base.ToSerialization_Base( This );
			Clear();
			foreach( metadata.MetadataFolder dataCollectionElement in This )
			{
				metadata.MetadataFolder_Serialization collectionElement = metadata.Serialization.ConstructSerialization<metadata.MetadataFolder_Serialization>( dataCollectionElement.GetType() );
				collectionElement.ToSerialization( dataCollectionElement );	
				Add( collectionElement );
			}
		}
		
	}

	[XmlType("MetadataMemberGroup")]
	public class MetadataMemberGroup_Serialization : core.ReferenceSerializationObject
	{
		[XmlIgnore]
		metadata.MetadataMemberGroup This;

		[XmlAttribute]
		[DefaultValue("Group")]
		public string Name = "Group";

		[XmlAttribute]
		public string PartialFileExtension;

		public override void CreateGuidToObjectMapping ( core.StringToObject stringToObject ) 
		{
			stringToObject.Add( GuidStr.ToOptGuid(), This );	
			CreateGuidToObjectMapping_Base( stringToObject );
		}
		protected override void CreateGuidToObjectMapping_Base ( core.StringToObject stringToObject )
		{
			base.CreateGuidToObjectMapping_Base( stringToObject );
		}
		
		public override void FromSerializationConstruct( core.DataObject dataObject )
		{
			FromSerializationConstruct_Base( (metadata.MetadataMemberGroup)dataObject );
		}
		protected void FromSerializationConstruct_Base( metadata.MetadataMemberGroup dataObject )
		{
			This = dataObject;
			base.FromSerializationConstruct_Base( This );
		}
		
		public override void FromSerialization( core.StringToObject stringToObject )
		{
			FromSerialization_Base( This, stringToObject );
		}
		protected void FromSerialization_Base( metadata.MetadataMemberGroup dataObject, core.StringToObject stringToObject )
		{
			base.FromSerialization_Base( This, stringToObject );	
			This.Name = Name;
			This.PartialFileExtension = PartialFileExtension;
		}
		
		public override void ToSerialization( core.DataObject dataObject )
		{
			ToSerialization_Base( (metadata.MetadataMemberGroup)dataObject );
		}
		protected void ToSerialization_Base( metadata.MetadataMemberGroup dataObject )
		{
			This = dataObject;	
			base.ToSerialization_Base( This );
			Name = This.Name;
			PartialFileExtension = This.PartialFileExtension;
		}
		
	}

	[XmlType("MemberGroupsCollection")]
	public class MemberGroupsCollection_Serialization : core.SerializationCollectionOf <metadata.MetadataMemberGroup_Serialization>
	{
		[XmlIgnore]
		metadata.MemberGroupsCollection This;

		public override void CreateGuidToObjectMapping ( core.StringToObject stringToObject ) 
		{
			CreateGuidToObjectMapping_Base( stringToObject );
		}
		protected override void CreateGuidToObjectMapping_Base ( core.StringToObject stringToObject )
		{
			base.CreateGuidToObjectMapping_Base( stringToObject );
			foreach( metadata.MetadataMemberGroup_Serialization collectionElement in Values )
				collectionElement.CreateGuidToObjectMapping( stringToObject );
		}
		
		public override void FromSerializationConstruct( core.DataObject dataObject )
		{
			FromSerializationConstruct_Base( (metadata.MemberGroupsCollection)dataObject );
		}
		protected void FromSerializationConstruct_Base( metadata.MemberGroupsCollection dataObject )
		{
			This = dataObject;
			base.FromSerializationConstruct_Base( This );
			This.Clear();
			foreach( metadata.MetadataMemberGroup_Serialization collectionElement in Values )
			{
				metadata.MetadataMemberGroup dataCollectionElement = metadata.Serialization.ConstructData<metadata.MetadataMemberGroup>( collectionElement.GetType() );
				collectionElement.FromSerializationConstruct( dataCollectionElement );
				This.Add( dataCollectionElement );
			}
		}
		
		public override void FromSerialization( core.StringToObject stringToObject )
		{
			FromSerialization_Base( This, stringToObject );
		}
		protected void FromSerialization_Base( metadata.MemberGroupsCollection dataObject, core.StringToObject stringToObject )
		{
			base.FromSerialization_Base( This, stringToObject );	
			foreach( metadata.MetadataMemberGroup_Serialization collectionElement in Values )
				collectionElement.FromSerialization( stringToObject );
		}
		
		public override void ToSerialization( core.DataObject dataObject )
		{
			ToSerialization_Base( (metadata.MemberGroupsCollection)dataObject );
		}
		protected void ToSerialization_Base( metadata.MemberGroupsCollection dataObject )
		{
			This = dataObject;	
			base.ToSerialization_Base( This );
			Clear();
			foreach( metadata.MetadataMemberGroup dataCollectionElement in This )
			{
				metadata.MetadataMemberGroup_Serialization collectionElement = metadata.Serialization.ConstructSerialization<metadata.MetadataMemberGroup_Serialization>( dataCollectionElement.GetType() );
				collectionElement.ToSerialization( dataCollectionElement );	
				Add( collectionElement );
			}
		}
		
	}

	[XmlType("MetadataProject")]
	public class MetadataProject_Serialization : core.SerializationObject
	{
		[XmlIgnore]
		metadata.MetadataProject This;

		[XmlAttribute]
		[DefaultValue("core")]
		public string CoreNamespace = "core";

		public metadata.MetadataFolder_Serialization Metadata = new metadata.MetadataFolder_Serialization ();

		[XmlArray]
		[XmlArrayItem(typeof(metadata.MetadataMemberGroup_Serialization),ElementName = "MetadataMemberGroup")]
		public metadata.MemberGroupsCollection_Serialization MemberGroups = new metadata.MemberGroupsCollection_Serialization();

		public override void CreateGuidToObjectMapping ( core.StringToObject stringToObject ) 
		{
			CreateGuidToObjectMapping_Base( stringToObject );
		}
		protected override void CreateGuidToObjectMapping_Base ( core.StringToObject stringToObject )
		{
			base.CreateGuidToObjectMapping_Base( stringToObject );
			if ( Metadata != null )
				Metadata.CreateGuidToObjectMapping( stringToObject );
			if ( MemberGroups != null )
				MemberGroups.CreateGuidToObjectMapping( stringToObject );
		}
		
		public override void FromSerializationConstruct( core.DataObject dataObject )
		{
			FromSerializationConstruct_Base( (metadata.MetadataProject)dataObject );
		}
		protected void FromSerializationConstruct_Base( metadata.MetadataProject dataObject )
		{
			This = dataObject;
			base.FromSerializationConstruct_Base( This );
			This.ProjectName = ProjectName;
			This.ProjectPath = ProjectPath;
			if ( Metadata != null )
			{
				This.Metadata.ParentProject = This;
				Metadata.FromSerializationConstruct( This.Metadata );
			}
			MemberGroups.FromSerializationConstruct( This.MemberGroups );
			foreach( metadata.MetadataMemberGroup collectionElement in This.MemberGroups )
			{
			}
		}
		
		public override void FromSerialization( core.StringToObject stringToObject )
		{
			FromSerialization_Base( This, stringToObject );
		}
		protected void FromSerialization_Base( metadata.MetadataProject dataObject, core.StringToObject stringToObject )
		{
			base.FromSerialization_Base( This, stringToObject );	
			This.CoreNamespace = CoreNamespace;
			if ( Metadata != null )
				Metadata.FromSerialization( stringToObject );
			MemberGroups.FromSerialization( stringToObject );
		}
		
		public override void ToSerialization( core.DataObject dataObject )
		{
			ToSerialization_Base( (metadata.MetadataProject)dataObject );
		}
		protected void ToSerialization_Base( metadata.MetadataProject dataObject )
		{
			This = dataObject;	
			base.ToSerialization_Base( This );
			ProjectName = This.ProjectName;
			ProjectPath = This.ProjectPath;
			CoreNamespace = This.CoreNamespace;
			if ( This.Metadata != null )
			{
				Metadata = metadata.Serialization.ConstructSerialization<metadata.MetadataFolder_Serialization>( This.Metadata.GetType() );
				Metadata.ParentProject = this;
				Metadata.ToSerialization( This.Metadata );
			}
			MemberGroups.ToSerialization( This.MemberGroups );
			foreach ( metadata.MetadataMemberGroup_Serialization collectionElement in MemberGroups )
			{
			}
		}
		
		public override void FileStorage_FromSerializationConstruct()
		{
			base.FileStorage_FromSerializationConstruct();
			Metadata.FileStorage_FromSerializationConstruct();
		}
		public override void FileStorage_FromSerialization( core.StringToObject stringToObject )
		{
			base.FileStorage_FromSerialization( stringToObject );
			Metadata.FileStorage_FromSerialization( stringToObject );
		}
		public override void FileStorage_ToSerialization()
		{
			base.FileStorage_ToSerialization();
			Metadata.FileStorage_ToSerialization();
		}
		
		[XmlIgnore] 
		public string ProjectPath;
		[XmlIgnore] 
		private string ProjectName;
		
		public const string	ProjectExtension = ".metaproj";
		
		[XmlIgnore] 
		private string FullName { get { return ProjectPath + @"\" + ProjectName; } }
		[XmlIgnore] 
		private string FullNameExtension { get { return FullName + ProjectExtension; } }
		
		static public metadata.MetadataProject_Serialization ProjectLoad(string projectFilenameFull)
		{
			string projectPath = Path.GetDirectoryName( projectFilenameFull );
			string projectName = Path.GetFileNameWithoutExtension( projectFilenameFull );
		
			FileStream filestream = new FileStream(projectPath + @"\" + projectName + ProjectExtension, FileMode.Open, FileAccess.Read);
			XmlSerializer xmlSerializer = new XmlSerializer(typeof( metadata.MetadataProject_Serialization ), metadata.Serialization.Types );
			metadata.MetadataProject_Serialization project = (metadata.MetadataProject_Serialization)xmlSerializer.Deserialize(filestream);
			filestream.Close();
		
			project.ProjectPath = projectPath;
			project.ProjectName = projectName;
		
			return project;
		}
		
		public void ProjectSave()
		{
			XmlSerializer xmlSerializer = new XmlSerializer(typeof(metadata.MetadataProject_Serialization), metadata.Serialization.Types );
			TextWriter textWriter = new StreamWriter(FullNameExtension);
			xmlSerializer.Serialize(textWriter, this);
			textWriter.Close();
		}
		
		public void ProjectSaveAs(string projectFilenameFull)
		{
			string projectPath = Path.GetDirectoryName( projectFilenameFull );
			string projectName = Path.GetFileNameWithoutExtension( projectFilenameFull );
			
			XmlSerializer xmlSerializer = new XmlSerializer(typeof(metadata.MetadataProject_Serialization), metadata.Serialization.Types );
			TextWriter textWriter = new StreamWriter(projectPath + @"\" + projectName + ProjectExtension);
			xmlSerializer.Serialize(textWriter, this);
			textWriter.Close();
		}
		
		public override void Load()
		{
			Metadata.Load();
		}
		
		public override void Save()
		{
			ProjectSave();
			Metadata.CreateDirectory(ProjectPath);
			Metadata.Save();
		}
		
		public override void SaveAs(string projectFilenameFull)
		{
			string projectPath = Path.GetDirectoryName( projectFilenameFull );
			ProjectSaveAs( projectFilenameFull );
			Metadata.CreateDirectory(projectPath);
			Metadata.SaveAs( projectPath );
		}
		
		static public metadata.MetadataProject_Serialization ProjectCreate(string projectFilenameFull)
		{
			string projectPath = Path.GetDirectoryName( projectFilenameFull );
			string projectName = Path.GetFileNameWithoutExtension( projectFilenameFull );
		
			metadata.MetadataProject_Serialization project = new metadata.MetadataProject_Serialization();
			project.ProjectName = projectName;
			project.ProjectPath = projectPath;
			return project;
		}
		
		
		static public metadata.MetadataProject_Serialization ProjectToSerialization( metadata.MetadataProject data )
		{
			metadata.MetadataProject_Serialization project = new metadata.MetadataProject_Serialization();	
			project.ToSerialization( data );
			return project;
		}
		
	}

	public static class MetadataProjectExt
	{
		public static string ProjectExtension( this metadata.MetadataProject nullthis )
		{
			return ".metaproj";
		}
		
		public static metadata.MetadataProject ProjectCreate( this metadata.MetadataProject nullthis, string projectFilenameFull)
		{
			metadata.MetadataProject dataProject = new metadata.MetadataProject();
		
			metadata.MetadataProject_Serialization project = metadata.MetadataProject_Serialization.ProjectCreate( projectFilenameFull );
			project.FromSerializationConstruct( dataProject );
		
			core.StringToObject stringToObject = new core.StringToObject();
			project.CreateGuidToObjectMapping( stringToObject );
		
			project.FromSerialization( stringToObject );	
		
			return dataProject;
		}
		
		public static metadata.MetadataProject ProjectLoad( this metadata.MetadataProject nullthis, string projectFilenameFull)
		{
			metadata.MetadataProject_Serialization project = metadata.MetadataProject_Serialization.ProjectLoad( projectFilenameFull );
			metadata.MetadataProject dataProject = new metadata.MetadataProject();
			project.FromSerializationConstruct( dataProject );
			
			core.StringToObject stringToObject = new core.StringToObject();
			project.CreateGuidToObjectMapping( stringToObject );
			project.FromSerialization( stringToObject );

			return dataProject;
		}
		
		public static void ProjectSave( this metadata.MetadataProject mainProject )
		{
			metadata.MetadataProject_Serialization project = metadata.MetadataProject_Serialization.ProjectToSerialization( mainProject );
			project.ProjectSave();
		}
		
		public static void ProjectSaveAs( this metadata.MetadataProject mainProject, string projectFilenameFull )
		{
			metadata.MetadataProject_Serialization project = metadata.MetadataProject_Serialization.ProjectToSerialization( mainProject );
			project.ProjectSaveAs(projectFilenameFull);
		}
		
		public static void Load( this metadata.MetadataProject mainProject )
		{
			
			metadata.MetadataProject_Serialization project = metadata.MetadataProject_Serialization.ProjectToSerialization( mainProject );
			project.Load();
			project.FileStorage_FromSerializationConstruct();
			
			core.StringToObject stringToObject = new core.StringToObject();
			project.CreateGuidToObjectMapping( stringToObject );
			
			project.FileStorage_FromSerialization( stringToObject );
		}
		
		public static void Save( this metadata.MetadataProject mainProject )
		{
			
			metadata.MetadataProject_Serialization project = metadata.MetadataProject_Serialization.ProjectToSerialization( mainProject );
			project.FileStorage_ToSerialization();
			project.Save();
		}
		
		public static void SaveAs( this metadata.MetadataProject mainProject, string projectFilenameFull )
		{
			
			metadata.MetadataProject_Serialization project = metadata.MetadataProject_Serialization.ProjectToSerialization( mainProject );
			project.FileStorage_ToSerialization();
			project.SaveAs(projectFilenameFull);
		}
	} // end of static class MetadataProjectExt

} /* namespace metadata */ 
