<#
	{
		CsReflectionFileGenerationCore core = new CsReflectionFileGenerationCore( project, csReflectionNamespace );
		core.Output.File = System.IO.Path.GetFileNameWithoutExtension ( Host.TemplateFile ) + ".Reflection.cs";
		core.Output.Project = csOutputProject;
		core.Render();
	}
	foreach( MetadataFile metadataFile in project.Metadata.FilesRecursive )
	{
		CsReflectionFileGeneration csReflectionFileGeneration = new CsReflectionFileGeneration( this, project, csReflectionNamespace, metadataFile );
		csReflectionFileGeneration.Output.File = metadataFile.RelativeName + ".Reflection.cs";
		csReflectionFileGeneration.Output.Project = csOutputProject;
		csReflectionFileGeneration.Render();
	}
#>
<#+
public class CsReflectionFileGenerationCore : Template
{
	protected MetadataProject	Project;
	protected string			CsReflectionNamespace;
	
	public CsReflectionFileGenerationCore( MetadataProject project, string csReflectionNamespace )
	{
		Project = project;
		CsReflectionNamespace = csReflectionNamespace;
	}
	
	public override string TransformText()
	{
#>
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace <#= Project.CoreNamespace #>
{
	public static class Reflection
	{
		private static Dictionary< System.Type,<#=CsReflectionNamespace#>.MetadataClass > DataTypeToReflection = new Dictionary< System.Type,<#=CsReflectionNamespace#>.MetadataClass >();	
	
		static Reflection()
		{
<#+
		foreach( MetadataClass c in Project.Metadata.Classes )
			if ( !(c is AbstractClass ) )
			{
#>
			DataTypeToReflection.Add( typeof(<#=c.QualifiedTypeName#>), <#=c.QualifiedTypeName#>_Reflection.MetadataClass );
<#+
			}
#>	
		}

		public static <#=CsReflectionNamespace#>.MetadataClass GetClass( core.DataObject obj )
		{
			<#=CsReflectionNamespace#>.MetadataClass metadataClass;
			if ( DataTypeToReflection.TryGetValue( obj.GetType(), out metadataClass ) )
				return metadataClass;
			return null;			
		}	
	}
} // // namespace <#= Project.CoreNamespace #>
<#+
		return this.GenerationEnvironment.ToString();
	}
} // HierarchyDeclarationCommon
#>
<#+
public class CsReflectionFileGeneration : Template
{
	protected GeneratedTextTransformation		TextTransformation;
	protected metadata.MetadataProject			Project;
	protected string							CsReflectionNamespace;
	protected metadata.MetadataFile				File;
	
	public CsReflectionFileGeneration( GeneratedTextTransformation textTransformation, metadata.MetadataProject project, string csReflectionNamespace, metadata.MetadataFile file )
	{
		TextTransformation = textTransformation;
		Project = project;
		CsReflectionNamespace = csReflectionNamespace;
		File = file;
	}
	
	public override string TransformText()
	{
#>

// AUTOGENERATED FILE. MODIFY IT AT YOUR OWN RISK.

<#+
		string qualifiedNamespaceBegin = File.QualifiedNamespaceBegin;
		if ( qualifiedNamespaceBegin.Length > 0 )
		{
			WriteLine( qualifiedNamespaceBegin );
			WriteLine( "" );
		}

		foreach( MetadataClass metadataClass in File.Content.Classes )
		{
			if ( metadataClass.Namespace.Length > 0 )
			{
				WriteLine( "namespace " + metadataClass.Namespace );
				WriteLine( "{" );
				WriteLine( "" );
			}
			
			foreach( Member member in metadataClass.Members )
			{
#>
public class <#=metadataClass.TypeName#>_Member_<#=member.Name#> : <#=CsReflectionNamespace#>.<#= member.GetType().Name #>
{
	public static <#=metadataClass.TypeName#>_Member_<#=member.Name#> Member = new <#=metadataClass.TypeName#>_Member_<#=member.Name#> 
	{ 
		Guid = new System.Guid("<#=member.Guid.ToString()#>") 
	};
	
<#+				
				MetadataClass memberPointer = null;
				if ( member is FileStorage )
					memberPointer = (member as FileStorage).Type;
				if ( member is Reference )
					memberPointer = (member as Reference).Type;
				if ( member is ParentReference )
					memberPointer = (member as ParentReference).Type;
				if ( member is Value )
				{
					Value value = member as Value;
					if ( value.Type is MetadataClass && !value.AggregateByValue )
						memberPointer = value.Type as MetadataClass;
				}
				
				if ( member is Collection )
				{
					Collection collection = member as Collection;
#>
	public override bool GetCollectionObject( core.DataObject ThisUnityped, ref core.DataObject collectionUnityped )
	{
		<#=metadataClass.QualifiedTypeName#> This = ThisUnityped as <#=metadataClass.QualifiedTypeName#>;
		if ( This == null )
			return false;
			
		collectionUnityped = This.<#=member.Name#>;
		return true;
	}
<#+
				}
				else if ( memberPointer != null )
				{
#>
	public override bool SetObjectValue( core.DataObject ThisUnityped, core.DataObject dataObjectUnityped )
	{
		<#=metadataClass.QualifiedTypeName#> This = ThisUnityped as <#=metadataClass.QualifiedTypeName#>;
		if ( This == null )
			return false;
			
		<#=memberPointer.QualifiedTypeName#> dataObject = null;
		if ( dataObjectUnityped != null )
		{
			dataObject = dataObjectUnityped as <#=memberPointer.QualifiedTypeName#>;
			if ( dataObject == null )
				return false;
		}		
		This.<#=member.Name#> = dataObject;
		return true;	
	}
	public override bool GetObjectValue( core.DataObject ThisUnityped, ref core.DataObject dataObjectUnityped )
	{
		<#=metadataClass.QualifiedTypeName#> This = ThisUnityped as <#=metadataClass.QualifiedTypeName#>;
		if ( This == null )
			return false;
			
		dataObjectUnityped = This.<#=member.Name#>;
		return true;	
	}
<#+
				}
				else if ( member is Value )
				{
					Value value = member as Value;
					if ( value.Type is Fundamental || value.Type is Enumeration )
					{
#>
	public override bool SetObjectValue( core.DataObject ThisUnityped, core.DataObject dataObjectUnityped )
	{
		<#=metadataClass.QualifiedTypeName#> This = ThisUnityped as <#=metadataClass.QualifiedTypeName#>;
		if ( This == null )
			return false;
		
		<#=value.Type.QualifiedTypeName#>_Boxed dataObject = dataObjectUnityped as <#=value.Type.QualifiedTypeName#>_Boxed;		
		if ( dataObject == null )
			return false;

		This.<#=member.Name#> = dataObject.value;

		return true;
	}
	public override bool GetObjectValue( core.DataObject ThisUnityped, ref core.DataObject dataObjectUnityped )
	{
		<#=metadataClass.QualifiedTypeName#> This = ThisUnityped as <#=metadataClass.QualifiedTypeName#>;
		if ( This == null )
			return false;

		<#=value.Type.QualifiedTypeName#>_Boxed dataObject = new <#=value.Type.QualifiedTypeName#>_Boxed();
		dataObject.value = This.<#=member.Name#>;
		
		dataObjectUnityped = dataObject;
		return true;
	}	
	public override bool GetObjectValue_ToByteStream( core.ByteStreamWriter stream, core.DataObject dataObjectUnityped ) 
	{ 
		<#=value.Type.QualifiedTypeName#>_Boxed dataObject = dataObjectUnityped as <#=value.Type.QualifiedTypeName#>_Boxed;		
		if ( dataObject == null )
			return false;
<#+
						if ( value.Type is Enumeration )
						{
#>		stream.WriteInt32( (int)dataObject.value );
<#+
						}
						else if ( value.Type is FundamentalBool )
						{
#>		stream.WriteUint8( dataObject.value ? (byte)1 : (byte)0 );
<#+
						}
						else if ( value.Type is FundamentalByte )
						{
#>		stream.WriteUint8( dataObject.value );
<#+
						}
						else if ( value.Type is FundamentalInt )
						{
#>		stream.WriteInt32( dataObject.value );
<#+
						}
						else if ( value.Type is FundamentalFloat )
						{
#>		stream.WriteFloat32( dataObject.value );
<#+
						}
						else if ( value.Type is FundamentalString )
						{
#>		stream.WriteBytes( System.Text.Encoding.ASCII.GetBytes( dataObject.value ) );
<#+
						}
#>		
		return true;
	}	
<#+
					}
					else if ( value.Type is MetadataClass && value.AggregateByValue )
					{
#>
	public override bool SetObjectValue( core.DataObject ThisUnityped, core.DataObject dataObjectUnityped )
	{
		<#=metadataClass.QualifiedTypeName#> This = ThisUnityped as <#=metadataClass.QualifiedTypeName#>;
		if ( This == null )
			return false;
		
		<#=value.Type.QualifiedTypeName#> dataObject = dataObjectUnityped as <#=value.Type.QualifiedTypeName#>;		
		if ( dataObject == null )
			return false;

		This.<#=member.Name#> = dataObject;

		return true;
	}
	public override bool GetObjectValue( core.DataObject ThisUnityped, ref core.DataObject dataObjectUnityped )
	{
		<#=metadataClass.QualifiedTypeName#> This = ThisUnityped as <#=metadataClass.QualifiedTypeName#>;
		if ( This == null )
			return false;

		dataObjectUnityped = This.<#=member.Name#>;
		return true;
	}
<#+
					}
				}
#>
};

<#+
			}
			
#>
public class <#=metadataClass.TypeName#>_Reflection : <#=CsReflectionNamespace#>.<#= metadataClass.GetType().Name #>
{
	public static <#=metadataClass.TypeName#>_Reflection MetadataClass = new <#=metadataClass.TypeName#>_Reflection 
	{ 
		  Guid = new System.Guid("<#=metadataClass.Guid.ToString()#>")
<#+
			if ( metadataClass.BaseClass != null )
			{
#>
		, BaseClass = <#= metadataClass.BaseClass.TypeName #>_Reflection.MetadataClass
<#+
			}
#>
	};
	
	public <#=metadataClass.TypeName#>_Reflection()
	{
<#+
			foreach( Member member in metadataClass.Members )
			{
#>
		Members.Add( new <#=metadataClass.TypeName#>_Member_<#=member.Name#>() );
<#+
			}
#>
	}
	
<#+
			if ( metadataClass is AbstractClass || metadataClass.UserDefined )
			{
#>
	public override core.DataObject New() 
	{ 
		return null; 
	}

	public override void Delete( core.DataObject dataObject ) 
	{ 
	}
<#+
			}
			else
			{
#>
	public override core.DataObject New() 
	{ 
		return new <#=metadataClass.QualifiedTypeName#>(); 
	}

	public override void Delete( core.DataObject dataObject ) 
	{
	}
<#+
			}
#>
};

<#+
			if ( metadataClass.Namespace.Length > 0 )
			{
				WriteLine( "" );
				WriteLine( "} // namespace " + metadataClass.Namespace );
			}

			WriteLine( "" );
		}

		string qualifiedNamespaceEnd = File.QualifiedNamespaceEnd;
		if ( qualifiedNamespaceEnd.Length > 0 )
		{
			WriteLine( qualifiedNamespaceEnd );
		}

		return this.GenerationEnvironment.ToString();
	}
}
#>
