
// AUTOGENERATED FILE. MODIFY IT AT YOUR OWN RISK.

#ifndef MetaMetadata_MetaFunction_Partial_h
#define MetaMetadata_MetaFunction_Partial_h

#include "..\Core.h"

// forward declarations from other files

namespace reflection { 
	class Type; class Type_Partial;
}
namespace reflection { 
	class MetadataClass; class MetadataClass_Partial;
}

// dependencies

#include "MetaClasses.h"
#include "MetaFundamental.h"

// forward declarations

namespace reflection { 
	class Function; class Function_Partial;
	class FunctionUser; class FunctionUser_Partial;
	class FunctionLua; class FunctionLua_Partial;
	class FunctionLuaCallCC; class FunctionLuaCallCC_Partial;
	class Argument; class Argument_Partial;
	class ArgumentsCollection; class ArgumentsCollection_Partial;
	class ArgumentValue; class ArgumentValue_Partial;
	class ArgumentReference; class ArgumentReference_Partial;
}

namespace reflection { 

	enum RemoteType
	{
		None = 0,
		Server = 1,
		Client = 2,
	};
	
	class RemoteType_Boxed : public core::DataObject
	{
	public:
		RemoteType value;
	};
	
	// classes
	
	namespace Argument_ByteStream
	{
		bool ObjectFromByteStream( core::ByteStreamReader & stream, reflection::Argument & dataObject );
	};

	class Argument_Partial
	{
	public:
		Argument_Partial();
		~Argument_Partial();

		string Get_Name() const;
		void Set_Name( string value );
		
	private:
		string Name;
	};

	namespace ArgumentsCollection_ByteStream
	{
		bool ObjectFromByteStream( core::ByteStreamReader & stream, reflection::ArgumentsCollection & dataObject );
	};

	class ArgumentsCollection_Partial : public core::CollectionOf < reflection::Argument * >
	{
	public:
		ArgumentsCollection_Partial();
		~ArgumentsCollection_Partial();
	};

	namespace Function_ByteStream
	{
		bool ObjectFromByteStream( core::ByteStreamReader & stream, reflection::Function & dataObject );
	};

	class Function_Partial
	{
	public:
		Function_Partial();
		~Function_Partial();

		reflection::Argument const & Get_Result() const;
		void Set_Result( reflection::Argument const & value );
		
		reflection::ArgumentsCollection_Partial & Get_Arguments();
		reflection::ArgumentsCollection_Partial const & Get_Arguments() const;
		
		reflection::RemoteType Get_Remote() const;
		void Set_Remote( reflection::RemoteType value );
		
		bool Get_IsStatic() const;
		void Set_IsStatic( bool value );
		
	private:
		reflection::Argument * Result;
		reflection::ArgumentsCollection_Partial Arguments;
		reflection::RemoteType Remote;
		bool IsStatic;
	};

	namespace FunctionUser_ByteStream
	{
		bool ObjectFromByteStream( core::ByteStreamReader & stream, reflection::FunctionUser & dataObject );
	};

	class FunctionUser_Partial
	{
	public:
		FunctionUser_Partial();
		~FunctionUser_Partial();

		bool Get_ExposeToLua() const;
		void Set_ExposeToLua( bool value );
		
	private:
		bool ExposeToLua;
	};

	namespace FunctionLua_ByteStream
	{
		bool ObjectFromByteStream( core::ByteStreamReader & stream, reflection::FunctionLua & dataObject );
	};

	class FunctionLua_Partial
	{
	public:
		FunctionLua_Partial();
		~FunctionLua_Partial();
	};

	namespace FunctionLuaCallCC_ByteStream
	{
		bool ObjectFromByteStream( core::ByteStreamReader & stream, reflection::FunctionLuaCallCC & dataObject );
	};

	class FunctionLuaCallCC_Partial
	{
	public:
		FunctionLuaCallCC_Partial();
		~FunctionLuaCallCC_Partial();
	};

	namespace ArgumentValue_ByteStream
	{
		bool ObjectFromByteStream( core::ByteStreamReader & stream, reflection::ArgumentValue & dataObject );
	};

	class ArgumentValue_Partial
	{
	public:
		ArgumentValue_Partial();
		~ArgumentValue_Partial();

		reflection::Type * Get_Type() const;
		void Set_Type( reflection::Type * value );
		
	private:
		reflection::Type * Type;
	};

	namespace ArgumentReference_ByteStream
	{
		bool ObjectFromByteStream( core::ByteStreamReader & stream, reflection::ArgumentReference & dataObject );
	};

	class ArgumentReference_Partial
	{
	public:
		ArgumentReference_Partial();
		~ArgumentReference_Partial();

		reflection::MetadataClass * Get_Type() const;
		void Set_Type( reflection::MetadataClass * value );
		
	private:
		reflection::MetadataClass * Type;
	};

} /* namespace reflection */ 

#endif // MetaMetadata_MetaFunction_Partial_h
