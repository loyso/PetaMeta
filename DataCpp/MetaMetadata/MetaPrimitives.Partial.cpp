
// AUTOGENERATED FILE. MODIFY IT AT YOUR OWN RISK.

#include "MetaPrimitives.h"

namespace reflection { 

bool Fundamental_ByteStream::ObjectFromByteStream( core::ByteStreamReader & stream, reflection::Fundamental & dataObject )
{
	return true;
}


Fundamental_Partial::Fundamental_Partial()
{
}

Fundamental_Partial::~Fundamental_Partial()
{
}


bool FundamentalBool_ByteStream::ObjectFromByteStream( core::ByteStreamReader & stream, reflection::FundamentalBool & dataObject )
{
	return true;
}


FundamentalBool_Partial::FundamentalBool_Partial()
{
}

FundamentalBool_Partial::~FundamentalBool_Partial()
{
}


bool FundamentalString_ByteStream::ObjectFromByteStream( core::ByteStreamReader & stream, reflection::FundamentalString & dataObject )
{
	return true;
}


FundamentalString_Partial::FundamentalString_Partial()
{
}

FundamentalString_Partial::~FundamentalString_Partial()
{
}


bool FundamentalInt_ByteStream::ObjectFromByteStream( core::ByteStreamReader & stream, reflection::FundamentalInt & dataObject )
{
	return true;
}


FundamentalInt_Partial::FundamentalInt_Partial()
{
}

FundamentalInt_Partial::~FundamentalInt_Partial()
{
}


bool FundamentalFloat_ByteStream::ObjectFromByteStream( core::ByteStreamReader & stream, reflection::FundamentalFloat & dataObject )
{
	return true;
}


FundamentalFloat_Partial::FundamentalFloat_Partial()
{
}

FundamentalFloat_Partial::~FundamentalFloat_Partial()
{
}


bool FundamentalByte_ByteStream::ObjectFromByteStream( core::ByteStreamReader & stream, reflection::FundamentalByte & dataObject )
{
	return true;
}


FundamentalByte_Partial::FundamentalByte_Partial()
{
}

FundamentalByte_Partial::~FundamentalByte_Partial()
{
}


bool Enumeration_ByteStream::ObjectFromByteStream( core::ByteStreamReader & stream, reflection::Enumeration & dataObject )
{
	return true;
}


Enumeration_Partial::Enumeration_Partial()
	: Enumerators()
{
}

Enumeration_Partial::~Enumeration_Partial()
{
	for ( reflection::EnumeratorsCollection_Partial::Iterator i = Enumerators.Begin(), e = Enumerators.End(); i != e; ++i )
		CORE_DELETE *i;
	Enumerators.Clear();
}

reflection::EnumeratorsCollection_Partial & Enumeration_Partial::Get_Enumerators() 
{ 
	return Enumerators; 
}
reflection::EnumeratorsCollection_Partial const & Enumeration_Partial::Get_Enumerators() const 
{ 
	return Enumerators; 
}


bool Enumerator_ByteStream::ObjectFromByteStream( core::ByteStreamReader & stream, reflection::Enumerator & dataObject )
{
	core::uint32 Name_Size; if ( !stream.ReadSize( Name_Size ) ) return false;
	void const * Name_Bytes; if ( !stream.ReadBytes( Name_Size, Name_Bytes ) ) return false;
	string Name ( (char*)Name_Bytes, Name_Size );
	dataObject.Set_Name ( Name );
	
	int IntegralValue; if ( !stream.ReadInt32( IntegralValue ) ) return false;
	dataObject.Set_IntegralValue ( IntegralValue );
	
	return true;
}


Enumerator_Partial::Enumerator_Partial()
	: Name()
	, IntegralValue()
{
}

Enumerator_Partial::~Enumerator_Partial()
{
}

string Enumerator_Partial::Get_Name() const 
{ 
	return Name; 
}
void Enumerator_Partial::Set_Name( string value ) 
{ 
	Name = value; 
}

int Enumerator_Partial::Get_IntegralValue() const 
{ 
	return IntegralValue; 
}
void Enumerator_Partial::Set_IntegralValue( int value ) 
{ 
	IntegralValue = value; 
}


bool EnumeratorsCollection_ByteStream::ObjectFromByteStream( core::ByteStreamReader & stream, reflection::EnumeratorsCollection & dataObject )
{
	return true;
}


EnumeratorsCollection_Partial::EnumeratorsCollection_Partial()
{
}

EnumeratorsCollection_Partial::~EnumeratorsCollection_Partial()
{
}


} /* namespace reflection */ 
