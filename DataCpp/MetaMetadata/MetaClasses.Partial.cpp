
// AUTOGENERATED FILE. MODIFY IT AT YOUR OWN RISK.

#include "MetaClasses.h"

namespace reflection { 

bool Type_ByteStream::ObjectFromByteStream( core::ByteStreamReader & stream, reflection::Type & dataObject )
{
	core::uint32 TypeName_Size; if ( !stream.ReadSize( TypeName_Size ) ) return false;
	void const * TypeName_Bytes; if ( !stream.ReadBytes( TypeName_Size, TypeName_Bytes ) ) return false;
	string TypeName ( (char*)TypeName_Bytes, TypeName_Size );
	dataObject.Set_TypeName ( TypeName );
	
	core::uint32 Namespace_Size; if ( !stream.ReadSize( Namespace_Size ) ) return false;
	void const * Namespace_Bytes; if ( !stream.ReadBytes( Namespace_Size, Namespace_Bytes ) ) return false;
	string Namespace ( (char*)Namespace_Bytes, Namespace_Size );
	dataObject.Set_Namespace ( Namespace );
	
	return true;
}


Type_Partial::Type_Partial()
	: Parent()
	, TypeName("Type")
	, Namespace("")
{
}

Type_Partial::~Type_Partial()
{
	Parent = NULL;
}

reflection::MetadataFileContent * Type_Partial::Get_Parent() const 
{ 
	return Parent; 
}
void Type_Partial::Set_Parent( reflection::MetadataFileContent * value ) 
{ 
	Parent = value; 
}

string Type_Partial::Get_TypeName() const 
{ 
	return TypeName; 
}
void Type_Partial::Set_TypeName( string value ) 
{ 
	TypeName = value; 
}

string Type_Partial::Get_Namespace() const 
{ 
	return Namespace; 
}
void Type_Partial::Set_Namespace( string value ) 
{ 
	Namespace = value; 
}


bool TypesCollection_ByteStream::ObjectFromByteStream( core::ByteStreamReader & stream, reflection::TypesCollection & dataObject )
{
	return true;
}


TypesCollection_Partial::TypesCollection_Partial()
{
}

TypesCollection_Partial::~TypesCollection_Partial()
{
}


bool MetadataClass_ByteStream::ObjectFromByteStream( core::ByteStreamReader & stream, reflection::MetadataClass & dataObject )
{
	core::uint8 IsReferenced_Byte; if ( !stream.ReadUint8( IsReferenced_Byte) ) return false;
	bool IsReferenced = !!IsReferenced_Byte;
	dataObject.Set_IsReferenced ( IsReferenced );
	
	core::uint8 HasMinMax_Byte; if ( !stream.ReadUint8( HasMinMax_Byte) ) return false;
	bool HasMinMax = !!HasMinMax_Byte;
	dataObject.Set_HasMinMax ( HasMinMax );
	
	core::uint8 UserDefined_Byte; if ( !stream.ReadUint8( UserDefined_Byte) ) return false;
	bool UserDefined = !!UserDefined_Byte;
	dataObject.Set_UserDefined ( UserDefined );
	
	return true;
}


MetadataClass_Partial::MetadataClass_Partial()
	: BaseClass()
	, IsReferenced(true)
	, HasMinMax(false)
	, Members()
	, UserDefined(false)
{
}

MetadataClass_Partial::~MetadataClass_Partial()
{
	BaseClass = NULL;
	for ( reflection::MembersCollection_Partial::Iterator i = Members.Begin(), e = Members.End(); i != e; ++i )
		CORE_DELETE *i;
	Members.Clear();
}

reflection::MetadataClass * MetadataClass_Partial::Get_BaseClass() const 
{ 
	return BaseClass; 
}
void MetadataClass_Partial::Set_BaseClass( reflection::MetadataClass * value ) 
{ 
	BaseClass = value; 
}

bool MetadataClass_Partial::Get_IsReferenced() const 
{ 
	return IsReferenced; 
}
void MetadataClass_Partial::Set_IsReferenced( bool value ) 
{ 
	IsReferenced = value; 
}

bool MetadataClass_Partial::Get_HasMinMax() const 
{ 
	return HasMinMax; 
}
void MetadataClass_Partial::Set_HasMinMax( bool value ) 
{ 
	HasMinMax = value; 
}

reflection::MembersCollection_Partial & MetadataClass_Partial::Get_Members() 
{ 
	return Members; 
}
reflection::MembersCollection_Partial const & MetadataClass_Partial::Get_Members() const 
{ 
	return Members; 
}

bool MetadataClass_Partial::Get_UserDefined() const 
{ 
	return UserDefined; 
}
void MetadataClass_Partial::Set_UserDefined( bool value ) 
{ 
	UserDefined = value; 
}


bool AbstractClass_ByteStream::ObjectFromByteStream( core::ByteStreamReader & stream, reflection::AbstractClass & dataObject )
{
	return true;
}


AbstractClass_Partial::AbstractClass_Partial()
{
}

AbstractClass_Partial::~AbstractClass_Partial()
{
}


bool CollectionClass_ByteStream::ObjectFromByteStream( core::ByteStreamReader & stream, reflection::CollectionClass & dataObject )
{
	core::uint8 IsPolymorphic_Byte; if ( !stream.ReadUint8( IsPolymorphic_Byte) ) return false;
	bool IsPolymorphic = !!IsPolymorphic_Byte;
	dataObject.Set_IsPolymorphic ( IsPolymorphic );
	
	return true;
}


CollectionClass_Partial::CollectionClass_Partial()
	: ItemsClass()
	, IsPolymorphic(false)
{
}

CollectionClass_Partial::~CollectionClass_Partial()
{
	ItemsClass = NULL;
}

reflection::MetadataClass * CollectionClass_Partial::Get_ItemsClass() const 
{ 
	return ItemsClass; 
}
void CollectionClass_Partial::Set_ItemsClass( reflection::MetadataClass * value ) 
{ 
	ItemsClass = value; 
}

bool CollectionClass_Partial::Get_IsPolymorphic() const 
{ 
	return IsPolymorphic; 
}
void CollectionClass_Partial::Set_IsPolymorphic( bool value ) 
{ 
	IsPolymorphic = value; 
}


bool FileClass_ByteStream::ObjectFromByteStream( core::ByteStreamReader & stream, reflection::FileClass & dataObject )
{
	core::uint32 FileExtension_Size; if ( !stream.ReadSize( FileExtension_Size ) ) return false;
	void const * FileExtension_Bytes; if ( !stream.ReadBytes( FileExtension_Size, FileExtension_Bytes ) ) return false;
	string FileExtension ( (char*)FileExtension_Bytes, FileExtension_Size );
	dataObject.Set_FileExtension ( FileExtension );
	
	return true;
}


FileClass_Partial::FileClass_Partial()
	: FileExtension("data")
{
}

FileClass_Partial::~FileClass_Partial()
{
}

string FileClass_Partial::Get_FileExtension() const 
{ 
	return FileExtension; 
}
void FileClass_Partial::Set_FileExtension( string value ) 
{ 
	FileExtension = value; 
}


bool FolderClass_ByteStream::ObjectFromByteStream( core::ByteStreamReader & stream, reflection::FolderClass & dataObject )
{
	return true;
}


FolderClass_Partial::FolderClass_Partial()
{
}

FolderClass_Partial::~FolderClass_Partial()
{
}


bool FolderStorageClass_ByteStream::ObjectFromByteStream( core::ByteStreamReader & stream, reflection::FolderStorageClass & dataObject )
{
	return true;
}


FolderStorageClass_Partial::FolderStorageClass_Partial()
{
}

FolderStorageClass_Partial::~FolderStorageClass_Partial()
{
}


bool ProjectClass_ByteStream::ObjectFromByteStream( core::ByteStreamReader & stream, reflection::ProjectClass & dataObject )
{
	core::uint32 FileExtension_Size; if ( !stream.ReadSize( FileExtension_Size ) ) return false;
	void const * FileExtension_Bytes; if ( !stream.ReadBytes( FileExtension_Size, FileExtension_Bytes ) ) return false;
	string FileExtension ( (char*)FileExtension_Bytes, FileExtension_Size );
	dataObject.Set_FileExtension ( FileExtension );
	
	return true;
}


ProjectClass_Partial::ProjectClass_Partial()
	: FileExtension("proj")
{
}

ProjectClass_Partial::~ProjectClass_Partial()
{
}

string ProjectClass_Partial::Get_FileExtension() const 
{ 
	return FileExtension; 
}
void ProjectClass_Partial::Set_FileExtension( string value ) 
{ 
	FileExtension = value; 
}


bool MetadataFileContent_ByteStream::ObjectFromByteStream( core::ByteStreamReader & stream, reflection::MetadataFileContent & dataObject )
{
	return true;
}


MetadataFileContent_Partial::MetadataFileContent_Partial()
	: Parent()
	, Types()
{
}

MetadataFileContent_Partial::~MetadataFileContent_Partial()
{
	Parent = NULL;
	for ( reflection::TypesCollection_Partial::Iterator i = Types.Begin(), e = Types.End(); i != e; ++i )
		CORE_DELETE *i;
	Types.Clear();
}

reflection::MetadataFile * MetadataFileContent_Partial::Get_Parent() const 
{ 
	return Parent; 
}
void MetadataFileContent_Partial::Set_Parent( reflection::MetadataFile * value ) 
{ 
	Parent = value; 
}

reflection::TypesCollection_Partial & MetadataFileContent_Partial::Get_Types() 
{ 
	return Types; 
}
reflection::TypesCollection_Partial const & MetadataFileContent_Partial::Get_Types() const 
{ 
	return Types; 
}


bool Member_ByteStream::ObjectFromByteStream( core::ByteStreamReader & stream, reflection::Member & dataObject )
{
	core::uint32 Name_Size; if ( !stream.ReadSize( Name_Size ) ) return false;
	void const * Name_Bytes; if ( !stream.ReadBytes( Name_Size, Name_Bytes ) ) return false;
	string Name ( (char*)Name_Bytes, Name_Size );
	dataObject.Set_Name ( Name );
	
	return true;
}


Member_Partial::Member_Partial()
	: Name("member")
	, Group()
{
}

Member_Partial::~Member_Partial()
{
	Group = NULL;
}

string Member_Partial::Get_Name() const 
{ 
	return Name; 
}
void Member_Partial::Set_Name( string value ) 
{ 
	Name = value; 
}

reflection::MetadataMemberGroup * Member_Partial::Get_Group() const 
{ 
	return Group; 
}
void Member_Partial::Set_Group( reflection::MetadataMemberGroup * value ) 
{ 
	Group = value; 
}


bool MembersCollection_ByteStream::ObjectFromByteStream( core::ByteStreamReader & stream, reflection::MembersCollection & dataObject )
{
	return true;
}


MembersCollection_Partial::MembersCollection_Partial()
{
}

MembersCollection_Partial::~MembersCollection_Partial()
{
}


bool Value_ByteStream::ObjectFromByteStream( core::ByteStreamReader & stream, reflection::Value & dataObject )
{
	core::uint8 IsXmlAttr_Byte; if ( !stream.ReadUint8( IsXmlAttr_Byte) ) return false;
	bool IsXmlAttr = !!IsXmlAttr_Byte;
	dataObject.Set_IsXmlAttr ( IsXmlAttr );
	
	core::uint8 IsPolymorphic_Byte; if ( !stream.ReadUint8( IsPolymorphic_Byte) ) return false;
	bool IsPolymorphic = !!IsPolymorphic_Byte;
	dataObject.Set_IsPolymorphic ( IsPolymorphic );
	
	core::uint32 DefaultValue_Size; if ( !stream.ReadSize( DefaultValue_Size ) ) return false;
	void const * DefaultValue_Bytes; if ( !stream.ReadBytes( DefaultValue_Size, DefaultValue_Bytes ) ) return false;
	string DefaultValue ( (char*)DefaultValue_Bytes, DefaultValue_Size );
	dataObject.Set_DefaultValue ( DefaultValue );
	
	core::uint32 DefaultValueXml_Size; if ( !stream.ReadSize( DefaultValueXml_Size ) ) return false;
	void const * DefaultValueXml_Bytes; if ( !stream.ReadBytes( DefaultValueXml_Size, DefaultValueXml_Bytes ) ) return false;
	string DefaultValueXml ( (char*)DefaultValueXml_Bytes, DefaultValueXml_Size );
	dataObject.Set_DefaultValueXml ( DefaultValueXml );
	
	core::uint32 Min_Size; if ( !stream.ReadSize( Min_Size ) ) return false;
	void const * Min_Bytes; if ( !stream.ReadBytes( Min_Size, Min_Bytes ) ) return false;
	string Min ( (char*)Min_Bytes, Min_Size );
	dataObject.Set_Min ( Min );
	
	core::uint32 Max_Size; if ( !stream.ReadSize( Max_Size ) ) return false;
	void const * Max_Bytes; if ( !stream.ReadBytes( Max_Size, Max_Bytes ) ) return false;
	string Max ( (char*)Max_Bytes, Max_Size );
	dataObject.Set_Max ( Max );
	
	return true;
}


Value_Partial::Value_Partial()
	: Type()
	, IsXmlAttr(false)
	, IsPolymorphic(false)
	, DefaultValue("")
	, DefaultValueXml("")
	, Min("")
	, Max("")
{
}

Value_Partial::~Value_Partial()
{
	Type = NULL;
}

reflection::Type * Value_Partial::Get_Type() const 
{ 
	return Type; 
}
void Value_Partial::Set_Type( reflection::Type * value ) 
{ 
	Type = value; 
}

bool Value_Partial::Get_IsXmlAttr() const 
{ 
	return IsXmlAttr; 
}
void Value_Partial::Set_IsXmlAttr( bool value ) 
{ 
	IsXmlAttr = value; 
}

bool Value_Partial::Get_IsPolymorphic() const 
{ 
	return IsPolymorphic; 
}
void Value_Partial::Set_IsPolymorphic( bool value ) 
{ 
	IsPolymorphic = value; 
}

string Value_Partial::Get_DefaultValue() const 
{ 
	return DefaultValue; 
}
void Value_Partial::Set_DefaultValue( string value ) 
{ 
	DefaultValue = value; 
}

string Value_Partial::Get_DefaultValueXml() const 
{ 
	return DefaultValueXml; 
}
void Value_Partial::Set_DefaultValueXml( string value ) 
{ 
	DefaultValueXml = value; 
}

string Value_Partial::Get_Min() const 
{ 
	return Min; 
}
void Value_Partial::Set_Min( string value ) 
{ 
	Min = value; 
}

string Value_Partial::Get_Max() const 
{ 
	return Max; 
}
void Value_Partial::Set_Max( string value ) 
{ 
	Max = value; 
}


bool ValueName_ByteStream::ObjectFromByteStream( core::ByteStreamReader & stream, reflection::ValueName & dataObject )
{
	return true;
}


ValueName_Partial::ValueName_Partial()
{
}

ValueName_Partial::~ValueName_Partial()
{
}


bool Reference_ByteStream::ObjectFromByteStream( core::ByteStreamReader & stream, reflection::Reference & dataObject )
{
	core::uint8 IsXmlAttr_Byte; if ( !stream.ReadUint8( IsXmlAttr_Byte) ) return false;
	bool IsXmlAttr = !!IsXmlAttr_Byte;
	dataObject.Set_IsXmlAttr ( IsXmlAttr );
	
	return true;
}


Reference_Partial::Reference_Partial()
	: Type()
	, IsXmlAttr(false)
{
}

Reference_Partial::~Reference_Partial()
{
	Type = NULL;
}

reflection::MetadataClass * Reference_Partial::Get_Type() const 
{ 
	return Type; 
}
void Reference_Partial::Set_Type( reflection::MetadataClass * value ) 
{ 
	Type = value; 
}

bool Reference_Partial::Get_IsXmlAttr() const 
{ 
	return IsXmlAttr; 
}
void Reference_Partial::Set_IsXmlAttr( bool value ) 
{ 
	IsXmlAttr = value; 
}


bool ParentReference_ByteStream::ObjectFromByteStream( core::ByteStreamReader & stream, reflection::ParentReference & dataObject )
{
	return true;
}


ParentReference_Partial::ParentReference_Partial()
	: Type()
{
}

ParentReference_Partial::~ParentReference_Partial()
{
	Type = NULL;
}

reflection::MetadataClass * ParentReference_Partial::Get_Type() const 
{ 
	return Type; 
}
void ParentReference_Partial::Set_Type( reflection::MetadataClass * value ) 
{ 
	Type = value; 
}


bool Collection_ByteStream::ObjectFromByteStream( core::ByteStreamReader & stream, reflection::Collection & dataObject )
{
	return true;
}


Collection_Partial::Collection_Partial()
	: Type()
{
}

Collection_Partial::~Collection_Partial()
{
	Type = NULL;
}

reflection::CollectionClass * Collection_Partial::Get_Type() const 
{ 
	return Type; 
}
void Collection_Partial::Set_Type( reflection::CollectionClass * value ) 
{ 
	Type = value; 
}


bool FileStorage_ByteStream::ObjectFromByteStream( core::ByteStreamReader & stream, reflection::FileStorage & dataObject )
{
	return true;
}


FileStorage_Partial::FileStorage_Partial()
	: Type()
{
}

FileStorage_Partial::~FileStorage_Partial()
{
	Type = NULL;
}

reflection::MetadataClass * FileStorage_Partial::Get_Type() const 
{ 
	return Type; 
}
void FileStorage_Partial::Set_Type( reflection::MetadataClass * value ) 
{ 
	Type = value; 
}


} /* namespace reflection */ 
