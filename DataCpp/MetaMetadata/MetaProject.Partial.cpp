
// AUTOGENERATED FILE. MODIFY IT AT YOUR OWN RISK.

#include "MetaProject.h"

namespace reflection { 

bool MetadataFile_ByteStream::ObjectFromByteStream( core::ByteStreamReader & stream, reflection::MetadataFile & dataObject )
{
	core::uint32 Name_Size; if ( !stream.ReadSize( Name_Size ) ) return false;
	void const * Name_Bytes; if ( !stream.ReadBytes( Name_Size, Name_Bytes ) ) return false;
	string Name ( (char*)Name_Bytes, Name_Size );
	dataObject.Set_Name ( Name );
	
	core::uint32 Namespace_Size; if ( !stream.ReadSize( Namespace_Size ) ) return false;
	void const * Namespace_Bytes; if ( !stream.ReadBytes( Namespace_Size, Namespace_Bytes ) ) return false;
	string Namespace ( (char*)Namespace_Bytes, Namespace_Size );
	dataObject.Set_Namespace ( Namespace );
	
	core::uint8 GenerateGui_Byte; if ( !stream.ReadUint8( GenerateGui_Byte) ) return false;
	bool GenerateGui = !!GenerateGui_Byte;
	dataObject.Set_GenerateGui ( GenerateGui );
	
	core::uint8 GenerateSerialization_Byte; if ( !stream.ReadUint8( GenerateSerialization_Byte) ) return false;
	bool GenerateSerialization = !!GenerateSerialization_Byte;
	dataObject.Set_GenerateSerialization ( GenerateSerialization );
	
	return true;
}


MetadataFile_Partial::MetadataFile_Partial()
	: Name("File")
	, Parent()
	, Namespace("")
	, Content()
	, GenerateGui(true)
	, GenerateSerialization(true)
{
}

MetadataFile_Partial::~MetadataFile_Partial()
{
	Parent = NULL;
	CORE_DELETE Content;
	Content = NULL;
}

string MetadataFile_Partial::Get_Name() const 
{ 
	return Name; 
}
void MetadataFile_Partial::Set_Name( string value ) 
{ 
	Name = value; 
}

reflection::MetadataFolder * MetadataFile_Partial::Get_Parent() const 
{ 
	return Parent; 
}
void MetadataFile_Partial::Set_Parent( reflection::MetadataFolder * value ) 
{ 
	Parent = value; 
}

string MetadataFile_Partial::Get_Namespace() const 
{ 
	return Namespace; 
}
void MetadataFile_Partial::Set_Namespace( string value ) 
{ 
	Namespace = value; 
}

reflection::MetadataFileContent * MetadataFile_Partial::Get_Content() const 
{ 
	return Content; 
}
void MetadataFile_Partial::Set_Content( reflection::MetadataFileContent * value ) 
{ 
	Content = value; 
}

bool MetadataFile_Partial::Get_GenerateGui() const 
{ 
	return GenerateGui; 
}
void MetadataFile_Partial::Set_GenerateGui( bool value ) 
{ 
	GenerateGui = value; 
}

bool MetadataFile_Partial::Get_GenerateSerialization() const 
{ 
	return GenerateSerialization; 
}
void MetadataFile_Partial::Set_GenerateSerialization( bool value ) 
{ 
	GenerateSerialization = value; 
}


bool MetadataFilesCollection_ByteStream::ObjectFromByteStream( core::ByteStreamReader & stream, reflection::MetadataFilesCollection & dataObject )
{
	return true;
}


MetadataFilesCollection_Partial::MetadataFilesCollection_Partial()
{
}

MetadataFilesCollection_Partial::~MetadataFilesCollection_Partial()
{
}


bool MetadataFolder_ByteStream::ObjectFromByteStream( core::ByteStreamReader & stream, reflection::MetadataFolder & dataObject )
{
	core::uint32 Name_Size; if ( !stream.ReadSize( Name_Size ) ) return false;
	void const * Name_Bytes; if ( !stream.ReadBytes( Name_Size, Name_Bytes ) ) return false;
	string Name ( (char*)Name_Bytes, Name_Size );
	dataObject.Set_Name ( Name );
	
	core::uint32 Namespace_Size; if ( !stream.ReadSize( Namespace_Size ) ) return false;
	void const * Namespace_Bytes; if ( !stream.ReadBytes( Namespace_Size, Namespace_Bytes ) ) return false;
	string Namespace ( (char*)Namespace_Bytes, Namespace_Size );
	dataObject.Set_Namespace ( Namespace );
	
	return true;
}


MetadataFolder_Partial::MetadataFolder_Partial()
	: Name("Folder")
	, Parent()
	, ParentProject()
	, Namespace("")
	, Folders()
	, Files()
{
}

MetadataFolder_Partial::~MetadataFolder_Partial()
{
	Parent = NULL;
	ParentProject = NULL;
	for ( reflection::MetadataFoldersCollection_Partial::Iterator i = Folders.Begin(), e = Folders.End(); i != e; ++i )
		CORE_DELETE *i;
	Folders.Clear();
	for ( reflection::MetadataFilesCollection_Partial::Iterator i = Files.Begin(), e = Files.End(); i != e; ++i )
		CORE_DELETE *i;
	Files.Clear();
}

string MetadataFolder_Partial::Get_Name() const 
{ 
	return Name; 
}
void MetadataFolder_Partial::Set_Name( string value ) 
{ 
	Name = value; 
}

reflection::MetadataFolder * MetadataFolder_Partial::Get_Parent() const 
{ 
	return Parent; 
}
void MetadataFolder_Partial::Set_Parent( reflection::MetadataFolder * value ) 
{ 
	Parent = value; 
}

reflection::MetadataProject * MetadataFolder_Partial::Get_ParentProject() const 
{ 
	return ParentProject; 
}
void MetadataFolder_Partial::Set_ParentProject( reflection::MetadataProject * value ) 
{ 
	ParentProject = value; 
}

string MetadataFolder_Partial::Get_Namespace() const 
{ 
	return Namespace; 
}
void MetadataFolder_Partial::Set_Namespace( string value ) 
{ 
	Namespace = value; 
}

reflection::MetadataFoldersCollection_Partial & MetadataFolder_Partial::Get_Folders() 
{ 
	return Folders; 
}
reflection::MetadataFoldersCollection_Partial const & MetadataFolder_Partial::Get_Folders() const 
{ 
	return Folders; 
}

reflection::MetadataFilesCollection_Partial & MetadataFolder_Partial::Get_Files() 
{ 
	return Files; 
}
reflection::MetadataFilesCollection_Partial const & MetadataFolder_Partial::Get_Files() const 
{ 
	return Files; 
}


bool MetadataFoldersCollection_ByteStream::ObjectFromByteStream( core::ByteStreamReader & stream, reflection::MetadataFoldersCollection & dataObject )
{
	return true;
}


MetadataFoldersCollection_Partial::MetadataFoldersCollection_Partial()
{
}

MetadataFoldersCollection_Partial::~MetadataFoldersCollection_Partial()
{
}


bool MetadataMemberGroup_ByteStream::ObjectFromByteStream( core::ByteStreamReader & stream, reflection::MetadataMemberGroup & dataObject )
{
	core::uint32 Name_Size; if ( !stream.ReadSize( Name_Size ) ) return false;
	void const * Name_Bytes; if ( !stream.ReadBytes( Name_Size, Name_Bytes ) ) return false;
	string Name ( (char*)Name_Bytes, Name_Size );
	dataObject.Set_Name ( Name );
	
	core::uint32 PartialFileExtension_Size; if ( !stream.ReadSize( PartialFileExtension_Size ) ) return false;
	void const * PartialFileExtension_Bytes; if ( !stream.ReadBytes( PartialFileExtension_Size, PartialFileExtension_Bytes ) ) return false;
	string PartialFileExtension ( (char*)PartialFileExtension_Bytes, PartialFileExtension_Size );
	dataObject.Set_PartialFileExtension ( PartialFileExtension );
	
	return true;
}


MetadataMemberGroup_Partial::MetadataMemberGroup_Partial()
	: Name("Group")
	, PartialFileExtension()
{
}

MetadataMemberGroup_Partial::~MetadataMemberGroup_Partial()
{
}

string MetadataMemberGroup_Partial::Get_Name() const 
{ 
	return Name; 
}
void MetadataMemberGroup_Partial::Set_Name( string value ) 
{ 
	Name = value; 
}

string MetadataMemberGroup_Partial::Get_PartialFileExtension() const 
{ 
	return PartialFileExtension; 
}
void MetadataMemberGroup_Partial::Set_PartialFileExtension( string value ) 
{ 
	PartialFileExtension = value; 
}


bool MemberGroupsCollection_ByteStream::ObjectFromByteStream( core::ByteStreamReader & stream, reflection::MemberGroupsCollection & dataObject )
{
	return true;
}


MemberGroupsCollection_Partial::MemberGroupsCollection_Partial()
{
}

MemberGroupsCollection_Partial::~MemberGroupsCollection_Partial()
{
}


bool MetadataProject_ByteStream::ObjectFromByteStream( core::ByteStreamReader & stream, reflection::MetadataProject & dataObject )
{
	core::uint32 CoreNamespace_Size; if ( !stream.ReadSize( CoreNamespace_Size ) ) return false;
	void const * CoreNamespace_Bytes; if ( !stream.ReadBytes( CoreNamespace_Size, CoreNamespace_Bytes ) ) return false;
	string CoreNamespace ( (char*)CoreNamespace_Bytes, CoreNamespace_Size );
	dataObject.Set_CoreNamespace ( CoreNamespace );
	
	reflection::MetadataFolder Metadata; if ( !reflection::MetadataFolder_ByteStream::ObjectFromByteStream( stream, Metadata ) ) return false;
	dataObject.Set_Metadata ( Metadata );
	
	return true;
}


MetadataProject_Partial::MetadataProject_Partial()
	: CoreNamespace("core")
	, Metadata ( CORE_NEW reflection::MetadataFolder )
	, MemberGroups()
{
}

MetadataProject_Partial::~MetadataProject_Partial()
{
	CORE_DELETE Metadata;
	Metadata = NULL;
	for ( reflection::MemberGroupsCollection_Partial::Iterator i = MemberGroups.Begin(), e = MemberGroups.End(); i != e; ++i )
		CORE_DELETE *i;
	MemberGroups.Clear();
}

string MetadataProject_Partial::Get_CoreNamespace() const 
{ 
	return CoreNamespace; 
}
void MetadataProject_Partial::Set_CoreNamespace( string value ) 
{ 
	CoreNamespace = value; 
}

reflection::MetadataFolder const & MetadataProject_Partial::Get_Metadata() const 
{ 
	CORE_ASSERT(Metadata); 
	return *Metadata; 
}
void MetadataProject_Partial::Set_Metadata( reflection::MetadataFolder const & value ) 
{ 
	CORE_ASSERT(Metadata); 
	*Metadata = value; 
}

reflection::MemberGroupsCollection_Partial & MetadataProject_Partial::Get_MemberGroups() 
{ 
	return MemberGroups; 
}
reflection::MemberGroupsCollection_Partial const & MetadataProject_Partial::Get_MemberGroups() const 
{ 
	return MemberGroups; 
}


} /* namespace reflection */ 
