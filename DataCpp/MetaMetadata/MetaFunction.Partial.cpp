
// AUTOGENERATED FILE. MODIFY IT AT YOUR OWN RISK.

#include "MetaFunction.h"

namespace reflection { 

bool Function_ByteStream::ObjectFromByteStream( core::ByteStreamReader & stream, reflection::Function & dataObject )
{
	reflection::Argument Result; if ( !reflection::Argument_ByteStream::ObjectFromByteStream( stream, Result ) ) return false;
	dataObject.Set_Result ( Result );
	
	reflection::RemoteType Remote; if ( !stream.ReadEnum( Remote ) ) return false;
	dataObject.Set_Remote ( Remote );
	
	core::uint8 IsStatic_Byte; if ( !stream.ReadUint8( IsStatic_Byte) ) return false;
	bool IsStatic = !!IsStatic_Byte;
	dataObject.Set_IsStatic ( IsStatic );
	
	return true;
}


Function_Partial::Function_Partial()
	: Result()
	, Arguments()
	, Remote(reflection::None)
	, IsStatic(false)
{
}

Function_Partial::~Function_Partial()
{
	CORE_DELETE Result;
	Result = NULL;
	for ( reflection::ArgumentsCollection_Partial::Iterator i = Arguments.Begin(), e = Arguments.End(); i != e; ++i )
		CORE_DELETE *i;
	Arguments.Clear();
}

reflection::Argument const & Function_Partial::Get_Result() const 
{ 
	CORE_ASSERT(Result); 
	return *Result; 
}
void Function_Partial::Set_Result( reflection::Argument const & value ) 
{ 
	CORE_ASSERT(Result); 
	*Result = value; 
}

reflection::ArgumentsCollection_Partial & Function_Partial::Get_Arguments() 
{ 
	return Arguments; 
}
reflection::ArgumentsCollection_Partial const & Function_Partial::Get_Arguments() const 
{ 
	return Arguments; 
}

reflection::RemoteType Function_Partial::Get_Remote() const 
{ 
	return Remote; 
}
void Function_Partial::Set_Remote( reflection::RemoteType value ) 
{ 
	Remote = value; 
}

bool Function_Partial::Get_IsStatic() const 
{ 
	return IsStatic; 
}
void Function_Partial::Set_IsStatic( bool value ) 
{ 
	IsStatic = value; 
}


bool FunctionUser_ByteStream::ObjectFromByteStream( core::ByteStreamReader & stream, reflection::FunctionUser & dataObject )
{
	core::uint8 ExposeToLua_Byte; if ( !stream.ReadUint8( ExposeToLua_Byte) ) return false;
	bool ExposeToLua = !!ExposeToLua_Byte;
	dataObject.Set_ExposeToLua ( ExposeToLua );
	
	return true;
}


FunctionUser_Partial::FunctionUser_Partial()
	: ExposeToLua(false)
{
}

FunctionUser_Partial::~FunctionUser_Partial()
{
}

bool FunctionUser_Partial::Get_ExposeToLua() const 
{ 
	return ExposeToLua; 
}
void FunctionUser_Partial::Set_ExposeToLua( bool value ) 
{ 
	ExposeToLua = value; 
}


bool FunctionLua_ByteStream::ObjectFromByteStream( core::ByteStreamReader & stream, reflection::FunctionLua & dataObject )
{
	return true;
}


FunctionLua_Partial::FunctionLua_Partial()
{
}

FunctionLua_Partial::~FunctionLua_Partial()
{
}


bool FunctionLuaCallCC_ByteStream::ObjectFromByteStream( core::ByteStreamReader & stream, reflection::FunctionLuaCallCC & dataObject )
{
	return true;
}


FunctionLuaCallCC_Partial::FunctionLuaCallCC_Partial()
{
}

FunctionLuaCallCC_Partial::~FunctionLuaCallCC_Partial()
{
}


bool Argument_ByteStream::ObjectFromByteStream( core::ByteStreamReader & stream, reflection::Argument & dataObject )
{
	core::uint32 Name_Size; if ( !stream.ReadSize( Name_Size ) ) return false;
	void const * Name_Bytes; if ( !stream.ReadBytes( Name_Size, Name_Bytes ) ) return false;
	string Name ( (char*)Name_Bytes, Name_Size );
	dataObject.Set_Name ( Name );
	
	return true;
}


Argument_Partial::Argument_Partial()
	: Name("arg")
{
}

Argument_Partial::~Argument_Partial()
{
}

string Argument_Partial::Get_Name() const 
{ 
	return Name; 
}
void Argument_Partial::Set_Name( string value ) 
{ 
	Name = value; 
}


bool ArgumentsCollection_ByteStream::ObjectFromByteStream( core::ByteStreamReader & stream, reflection::ArgumentsCollection & dataObject )
{
	return true;
}


ArgumentsCollection_Partial::ArgumentsCollection_Partial()
{
}

ArgumentsCollection_Partial::~ArgumentsCollection_Partial()
{
}


bool ArgumentValue_ByteStream::ObjectFromByteStream( core::ByteStreamReader & stream, reflection::ArgumentValue & dataObject )
{
	return true;
}


ArgumentValue_Partial::ArgumentValue_Partial()
	: Type()
{
}

ArgumentValue_Partial::~ArgumentValue_Partial()
{
	Type = NULL;
}

reflection::Type * ArgumentValue_Partial::Get_Type() const 
{ 
	return Type; 
}
void ArgumentValue_Partial::Set_Type( reflection::Type * value ) 
{ 
	Type = value; 
}


bool ArgumentReference_ByteStream::ObjectFromByteStream( core::ByteStreamReader & stream, reflection::ArgumentReference & dataObject )
{
	return true;
}


ArgumentReference_Partial::ArgumentReference_Partial()
	: Type()
{
}

ArgumentReference_Partial::~ArgumentReference_Partial()
{
	Type = NULL;
}

reflection::MetadataClass * ArgumentReference_Partial::Get_Type() const 
{ 
	return Type; 
}
void ArgumentReference_Partial::Set_Type( reflection::MetadataClass * value ) 
{ 
	Type = value; 
}


} /* namespace reflection */ 
