#ifndef Metadata_Game_Scene_Reflection_h
#define Metadata_Game_Scene_Reflection_h

// AUTOGENERATED FILE. MODIFY IT AT YOUR OWN RISK.

namespace scene { 

	// forward declarations
	class SceneObject;
	class SceneObjectsCollection;
	class SceneMesh;
	class SceneAnimMesh;
	class SceneZoneTrigger;
	class Scene;
	class Controller;
	class ControllerBox;
	class ControllerSphere;
	
	// reflection classes
	
	class SceneObject_Reflection : public reflection::MetadataClass
	{
	public:
		SceneObject_Reflection();
		
		void CopyObjectDataFromTo( SceneObject const & from, SceneObject & to );
		
		virtual core::ReferenceObject * New() const;
		virtual void Delete( core::ReferenceObject * pDataObject ) const;
	};

	class SceneObjectsCollection_Reflection : public reflection::CollectionClass
	{
	public:
		SceneObjectsCollection_Reflection();
		
		void CopyObjectDataFromTo( SceneObjectsCollection const & from, SceneObjectsCollection & to );
		
	};

	class SceneMesh_Reflection : public reflection::MetadataClass
	{
	public:
		SceneMesh_Reflection();
		
		void CopyObjectDataFromTo( SceneMesh const & from, SceneMesh & to );
		
		virtual core::ReferenceObject * New() const;
		virtual void Delete( core::ReferenceObject * pDataObject ) const;
	};

	class SceneAnimMesh_Reflection : public reflection::MetadataClass
	{
	public:
		SceneAnimMesh_Reflection();
		
		void CopyObjectDataFromTo( SceneAnimMesh const & from, SceneAnimMesh & to );
		
		virtual core::ReferenceObject * New() const;
		virtual void Delete( core::ReferenceObject * pDataObject ) const;
	};

	class SceneZoneTrigger_Reflection : public reflection::MetadataClass
	{
	public:
		SceneZoneTrigger_Reflection();
		
		void CopyObjectDataFromTo( SceneZoneTrigger const & from, SceneZoneTrigger & to );
		
		virtual core::ReferenceObject * New() const;
		virtual void Delete( core::ReferenceObject * pDataObject ) const;
	};

	class Scene_Reflection : public reflection::MetadataClass
	{
	public:
		Scene_Reflection();
		
		void CopyObjectDataFromTo( Scene const & from, Scene & to );
		
		virtual core::ReferenceObject * New() const;
		virtual void Delete( core::ReferenceObject * pDataObject ) const;
	};

	class Controller_Reflection : public reflection::AbstractClass
	{
	public:
		Controller_Reflection();
		
		void CopyObjectDataFromTo( Controller const & from, Controller & to );
		
		virtual core::ReferenceObject * New() const;
		virtual void Delete( core::ReferenceObject * pDataObject ) const;
	};

	class ControllerBox_Reflection : public reflection::MetadataClass
	{
	public:
		ControllerBox_Reflection();
		
		void CopyObjectDataFromTo( ControllerBox const & from, ControllerBox & to );
		
		virtual core::ReferenceObject * New() const;
		virtual void Delete( core::ReferenceObject * pDataObject ) const;
	};

	class ControllerSphere_Reflection : public reflection::MetadataClass
	{
	public:
		ControllerSphere_Reflection();
		
		void CopyObjectDataFromTo( ControllerSphere const & from, ControllerSphere & to );
		
		virtual core::ReferenceObject * New() const;
		virtual void Delete( core::ReferenceObject * pDataObject ) const;
	};

} /* namespace scene */ 

#endif // Metadata_Game_Scene_Reflection_h
