
// AUTOGENERATED FILE. MODIFY IT AT YOUR OWN RISK.

#include "ProjectGui.h"

namespace gui { 

bool Gui_ByteStream::ObjectFromByteStream( core::ByteStreamReader & stream, gui::Gui & dataObject )
{
	core::uint32 name_Size; if ( !stream.ReadSize( name_Size ) ) return false;
	void const * name_Bytes; if ( !stream.ReadBytes( name_Size, name_Bytes ) ) return false;
	string name ( (char*)name_Bytes, name_Size );
	dataObject.Set_name ( name );
	
	gui::GuiMainMenu mainMenu; if ( !gui::GuiMainMenu_ByteStream::ObjectFromByteStream( stream, mainMenu ) ) return false;
	dataObject.Set_mainMenu ( mainMenu );
	
	gui::GuiGame game; if ( !gui::GuiGame_ByteStream::ObjectFromByteStream( stream, game ) ) return false;
	dataObject.Set_game ( game );
	
	return true;
}


Gui_Partial::Gui_Partial()
	: name("Gui")
	, mainMenu ( CORE_NEW gui::GuiMainMenu )
	, game ( CORE_NEW gui::GuiGame )
	, parent()
{
}

Gui_Partial::~Gui_Partial()
{
	CORE_DELETE mainMenu;
	mainMenu = NULL;
	CORE_DELETE game;
	game = NULL;
	parent = NULL;
}

string Gui_Partial::Get_name() const 
{ 
	return name; 
}
void Gui_Partial::Set_name( string value ) 
{ 
	name = value; 
}

gui::GuiMainMenu const & Gui_Partial::Get_mainMenu() const 
{ 
	CORE_ASSERT(mainMenu); 
	return *mainMenu; 
}
void Gui_Partial::Set_mainMenu( gui::GuiMainMenu const & value ) 
{ 
	CORE_ASSERT(mainMenu); 
	*mainMenu = value; 
}

gui::GuiGame const & Gui_Partial::Get_game() const 
{ 
	CORE_ASSERT(game); 
	return *game; 
}
void Gui_Partial::Set_game( gui::GuiGame const & value ) 
{ 
	CORE_ASSERT(game); 
	*game = value; 
}

game::Game * Gui_Partial::Get_parent() const 
{ 
	return parent; 
}
void Gui_Partial::Set_parent( game::Game * value ) 
{ 
	parent = value; 
}


bool GuiCommon_ByteStream::ObjectFromByteStream( core::ByteStreamReader & stream, gui::GuiCommon & dataObject )
{
	core::uint32 name_Size; if ( !stream.ReadSize( name_Size ) ) return false;
	void const * name_Bytes; if ( !stream.ReadBytes( name_Size, name_Bytes ) ) return false;
	string name ( (char*)name_Bytes, name_Size );
	dataObject.Set_name ( name );
	
	return true;
}


GuiCommon_Partial::GuiCommon_Partial()
	: name("Common")
	, files()
	, parent()
{
}

GuiCommon_Partial::~GuiCommon_Partial()
{
	for ( gui::GuiFilesCollection_Partial::Iterator i = files.Begin(), e = files.End(); i != e; ++i )
		CORE_DELETE *i;
	files.Clear();
	parent = NULL;
}

string GuiCommon_Partial::Get_name() const 
{ 
	return name; 
}
void GuiCommon_Partial::Set_name( string value ) 
{ 
	name = value; 
}

gui::GuiFilesCollection_Partial & GuiCommon_Partial::Get_files() 
{ 
	return files; 
}
gui::GuiFilesCollection_Partial const & GuiCommon_Partial::Get_files() const 
{ 
	return files; 
}

gui::Gui * GuiCommon_Partial::Get_parent() const 
{ 
	return parent; 
}
void GuiCommon_Partial::Set_parent( gui::Gui * value ) 
{ 
	parent = value; 
}


bool GuiMainMenu_ByteStream::ObjectFromByteStream( core::ByteStreamReader & stream, gui::GuiMainMenu & dataObject )
{
	return true;
}


GuiMainMenu_Partial::GuiMainMenu_Partial()
{
}

GuiMainMenu_Partial::~GuiMainMenu_Partial()
{
}


bool GuiGame_ByteStream::ObjectFromByteStream( core::ByteStreamReader & stream, gui::GuiGame & dataObject )
{
	return true;
}


GuiGame_Partial::GuiGame_Partial()
{
}

GuiGame_Partial::~GuiGame_Partial()
{
}


bool GuiFile_ByteStream::ObjectFromByteStream( core::ByteStreamReader & stream, gui::GuiFile & dataObject )
{
	core::uint32 name_Size; if ( !stream.ReadSize( name_Size ) ) return false;
	void const * name_Bytes; if ( !stream.ReadBytes( name_Size, name_Bytes ) ) return false;
	string name ( (char*)name_Bytes, name_Size );
	dataObject.Set_name ( name );
	
	return true;
}


GuiFile_Partial::GuiFile_Partial()
	: mainWindow()
	, parent()
	, name("File")
{
}

GuiFile_Partial::~GuiFile_Partial()
{
	CORE_DELETE mainWindow;
	mainWindow = NULL;
	parent = NULL;
}

gui::Window * GuiFile_Partial::Get_mainWindow() const 
{ 
	return mainWindow; 
}
void GuiFile_Partial::Set_mainWindow( gui::Window * value ) 
{ 
	mainWindow = value; 
}

gui::GuiCommon * GuiFile_Partial::Get_parent() const 
{ 
	return parent; 
}
void GuiFile_Partial::Set_parent( gui::GuiCommon * value ) 
{ 
	parent = value; 
}

string GuiFile_Partial::Get_name() const 
{ 
	return name; 
}
void GuiFile_Partial::Set_name( string value ) 
{ 
	name = value; 
}


bool GuiFilesCollection_ByteStream::ObjectFromByteStream( core::ByteStreamReader & stream, gui::GuiFilesCollection & dataObject )
{
	return true;
}


GuiFilesCollection_Partial::GuiFilesCollection_Partial()
{
}

GuiFilesCollection_Partial::~GuiFilesCollection_Partial()
{
}


} /* namespace gui */ 
