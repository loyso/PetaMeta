
// AUTOGENERATED FILE. MODIFY IT AT YOUR OWN RISK.

using System;
using System.Collections.Generic;
using System.IO;
using System.Xml.Serialization;
using System.ComponentModel;

namespace scene { 

	[XmlType("SceneObject")]
	public class SceneObject_Serialization : core.ReferenceSerializationObject
	{
		[XmlIgnore]
		scene.SceneObject This;

		[XmlIgnore]
		public scene.Scene_Serialization parent;

		public Vec3_Serialization position = new Vec3_Serialization {x=1.0f, y=1.0f, z=1.0f};

		[DefaultValue(1.0f)]
		public float scale = 1.0f;

		public Color_Serialization color = new Color_Serialization {a=0, r=255, g=255, b=255};

		[DefaultValue(2)]
		public int lod = 2;

		public bool visible;

		[DefaultValue("")]
		public string next;

		public bool isSoundEnabled;

		public bool isSfxEnabled;






		public override void CreateGuidToObjectMapping ( core.StringToObject stringToObject ) 
		{
			stringToObject.Add( GuidStr.ToOptGuid(), This );	
			CreateGuidToObjectMapping_Base( stringToObject );
		}
		protected override void CreateGuidToObjectMapping_Base ( core.StringToObject stringToObject )
		{
			base.CreateGuidToObjectMapping_Base( stringToObject );
		}
		
		public override void FromSerializationConstruct( core.DataObject dataObject )
		{
			FromSerializationConstruct_Base( (scene.SceneObject)dataObject );
		}
		protected void FromSerializationConstruct_Base( scene.SceneObject dataObject )
		{
			This = dataObject;
			base.FromSerializationConstruct_Base( This );
			if ( position != null )
			{
				position.FromSerializationConstruct( This.position );
			}
			if ( color != null )
			{
				color.FromSerializationConstruct( This.color );
			}
		}
		
		public override void FromSerialization( core.StringToObject stringToObject )
		{
			FromSerialization_Base( This, stringToObject );
		}
		protected void FromSerialization_Base( scene.SceneObject dataObject, core.StringToObject stringToObject )
		{
			base.FromSerialization_Base( This, stringToObject );	
			if ( position != null )
				position.FromSerialization( stringToObject );
			This.scale = scale;
			if ( color != null )
				color.FromSerialization( stringToObject );
			This.lod = lod;
			This.visible = visible;
			This.next = stringToObject.Fixup < scene.SceneObject >( next.ToOptGuid() );
			This.isSoundEnabled = isSoundEnabled;
			This.isSfxEnabled = isSfxEnabled;
		}
		
		public override void ToSerialization( core.DataObject dataObject )
		{
			ToSerialization_Base( (scene.SceneObject)dataObject );
		}
		protected void ToSerialization_Base( scene.SceneObject dataObject )
		{
			This = dataObject;	
			base.ToSerialization_Base( This );
			if ( This.position != null )
			{
				position = data.Serialization.ConstructSerialization<Vec3_Serialization>( This.position.GetType() );
				position.ToSerialization( This.position );
			}
			scale = This.scale;
			if ( This.color != null )
			{
				color = data.Serialization.ConstructSerialization<Color_Serialization>( This.color.GetType() );
				color.ToSerialization( This.color );
			}
			lod = This.lod;
			visible = This.visible;
			next = ( This.next == null ? "" : This.next.Guid.ToOptString() );
			isSoundEnabled = This.isSoundEnabled;
			isSfxEnabled = This.isSfxEnabled;
		}
		
	}

	[XmlType("SceneObjectsCollection")]
	public class SceneObjectsCollection_Serialization : core.SerializationCollectionOf <scene.SceneObject_Serialization>
	{
		[XmlIgnore]
		scene.SceneObjectsCollection This;

		public override void CreateGuidToObjectMapping ( core.StringToObject stringToObject ) 
		{
			CreateGuidToObjectMapping_Base( stringToObject );
		}
		protected override void CreateGuidToObjectMapping_Base ( core.StringToObject stringToObject )
		{
			base.CreateGuidToObjectMapping_Base( stringToObject );
			foreach( scene.SceneObject_Serialization collectionElement in Values )
				collectionElement.CreateGuidToObjectMapping( stringToObject );
		}
		
		public override void FromSerializationConstruct( core.DataObject dataObject )
		{
			FromSerializationConstruct_Base( (scene.SceneObjectsCollection)dataObject );
		}
		protected void FromSerializationConstruct_Base( scene.SceneObjectsCollection dataObject )
		{
			This = dataObject;
			base.FromSerializationConstruct_Base( This );
			This.Clear();
			foreach( scene.SceneObject_Serialization collectionElement in Values )
			{
				scene.SceneObject dataCollectionElement = data.Serialization.ConstructData<scene.SceneObject>( collectionElement.GetType() );
				collectionElement.FromSerializationConstruct( dataCollectionElement );
				This.Add( dataCollectionElement );
			}
		}
		
		public override void FromSerialization( core.StringToObject stringToObject )
		{
			FromSerialization_Base( This, stringToObject );
		}
		protected void FromSerialization_Base( scene.SceneObjectsCollection dataObject, core.StringToObject stringToObject )
		{
			base.FromSerialization_Base( This, stringToObject );	
			foreach( scene.SceneObject_Serialization collectionElement in Values )
				collectionElement.FromSerialization( stringToObject );
		}
		
		public override void ToSerialization( core.DataObject dataObject )
		{
			ToSerialization_Base( (scene.SceneObjectsCollection)dataObject );
		}
		protected void ToSerialization_Base( scene.SceneObjectsCollection dataObject )
		{
			This = dataObject;	
			base.ToSerialization_Base( This );
			Clear();
			foreach( scene.SceneObject dataCollectionElement in This )
			{
				scene.SceneObject_Serialization collectionElement = data.Serialization.ConstructSerialization<scene.SceneObject_Serialization>( dataCollectionElement.GetType() );
				collectionElement.ToSerialization( dataCollectionElement );	
				Add( collectionElement );
			}
		}
		
	}

	[XmlType("SceneMesh")]
	public class SceneMesh_Serialization : scene.SceneObject_Serialization
	{
		[XmlIgnore]
		scene.SceneMesh This;

		public Color_Serialization colorSnd = new Color_Serialization ();



		public override void CreateGuidToObjectMapping ( core.StringToObject stringToObject ) 
		{
			stringToObject.Add( GuidStr.ToOptGuid(), This );	
			CreateGuidToObjectMapping_Base( stringToObject );
		}
		protected override void CreateGuidToObjectMapping_Base ( core.StringToObject stringToObject )
		{
			base.CreateGuidToObjectMapping_Base( stringToObject );
		}
		
		public override void FromSerializationConstruct( core.DataObject dataObject )
		{
			FromSerializationConstruct_Base( (scene.SceneMesh)dataObject );
		}
		protected void FromSerializationConstruct_Base( scene.SceneMesh dataObject )
		{
			This = dataObject;
			base.FromSerializationConstruct_Base( This );
			if ( colorSnd != null )
			{
				colorSnd.FromSerializationConstruct( This.colorSnd );
			}
		}
		
		public override void FromSerialization( core.StringToObject stringToObject )
		{
			FromSerialization_Base( This, stringToObject );
		}
		protected void FromSerialization_Base( scene.SceneMesh dataObject, core.StringToObject stringToObject )
		{
			base.FromSerialization_Base( This, stringToObject );	
			if ( colorSnd != null )
				colorSnd.FromSerialization( stringToObject );
		}
		
		public override void ToSerialization( core.DataObject dataObject )
		{
			ToSerialization_Base( (scene.SceneMesh)dataObject );
		}
		protected void ToSerialization_Base( scene.SceneMesh dataObject )
		{
			This = dataObject;	
			base.ToSerialization_Base( This );
			if ( This.colorSnd != null )
			{
				colorSnd = data.Serialization.ConstructSerialization<Color_Serialization>( This.colorSnd.GetType() );
				colorSnd.ToSerialization( This.colorSnd );
			}
		}
		
	}

	[XmlType("SceneAnimMesh")]
	public class SceneAnimMesh_Serialization : scene.SceneMesh_Serialization
	{
		[XmlIgnore]
		scene.SceneAnimMesh This;

		public Vec3_Serialization positionSfx = new Vec3_Serialization ();

		public override void CreateGuidToObjectMapping ( core.StringToObject stringToObject ) 
		{
			stringToObject.Add( GuidStr.ToOptGuid(), This );	
			CreateGuidToObjectMapping_Base( stringToObject );
		}
		protected override void CreateGuidToObjectMapping_Base ( core.StringToObject stringToObject )
		{
			base.CreateGuidToObjectMapping_Base( stringToObject );
		}
		
		public override void FromSerializationConstruct( core.DataObject dataObject )
		{
			FromSerializationConstruct_Base( (scene.SceneAnimMesh)dataObject );
		}
		protected void FromSerializationConstruct_Base( scene.SceneAnimMesh dataObject )
		{
			This = dataObject;
			base.FromSerializationConstruct_Base( This );
			if ( positionSfx != null )
			{
				positionSfx.FromSerializationConstruct( This.positionSfx );
			}
		}
		
		public override void FromSerialization( core.StringToObject stringToObject )
		{
			FromSerialization_Base( This, stringToObject );
		}
		protected void FromSerialization_Base( scene.SceneAnimMesh dataObject, core.StringToObject stringToObject )
		{
			base.FromSerialization_Base( This, stringToObject );	
			if ( positionSfx != null )
				positionSfx.FromSerialization( stringToObject );
		}
		
		public override void ToSerialization( core.DataObject dataObject )
		{
			ToSerialization_Base( (scene.SceneAnimMesh)dataObject );
		}
		protected void ToSerialization_Base( scene.SceneAnimMesh dataObject )
		{
			This = dataObject;	
			base.ToSerialization_Base( This );
			if ( This.positionSfx != null )
			{
				positionSfx = data.Serialization.ConstructSerialization<Vec3_Serialization>( This.positionSfx.GetType() );
				positionSfx.ToSerialization( This.positionSfx );
			}
		}
		
	}

	[XmlType("SceneZoneTrigger")]
	public class SceneZoneTrigger_Serialization : scene.SceneObject_Serialization
	{
		[XmlIgnore]
		scene.SceneZoneTrigger This;

		[DefaultValue("Trigger")]
		public string name = "Trigger";

		[DefaultValue(scene.TriggerType.Character)]
		public scene.TriggerType triggerType = scene.TriggerType.Character;

		public scene.Controller_Serialization ctrl;

		public override void CreateGuidToObjectMapping ( core.StringToObject stringToObject ) 
		{
			stringToObject.Add( GuidStr.ToOptGuid(), This );	
			CreateGuidToObjectMapping_Base( stringToObject );
		}
		protected override void CreateGuidToObjectMapping_Base ( core.StringToObject stringToObject )
		{
			base.CreateGuidToObjectMapping_Base( stringToObject );
			if ( ctrl != null )
				ctrl.CreateGuidToObjectMapping( stringToObject );
		}
		
		public override void FromSerializationConstruct( core.DataObject dataObject )
		{
			FromSerializationConstruct_Base( (scene.SceneZoneTrigger)dataObject );
		}
		protected void FromSerializationConstruct_Base( scene.SceneZoneTrigger dataObject )
		{
			This = dataObject;
			base.FromSerializationConstruct_Base( This );
			if ( ctrl != null )
			{
				This.ctrl = data.Serialization.ConstructData<scene.Controller>( ctrl.GetType() );
				ctrl.FromSerializationConstruct( This.ctrl );
			}
		}
		
		public override void FromSerialization( core.StringToObject stringToObject )
		{
			FromSerialization_Base( This, stringToObject );
		}
		protected void FromSerialization_Base( scene.SceneZoneTrigger dataObject, core.StringToObject stringToObject )
		{
			base.FromSerialization_Base( This, stringToObject );	
			This.name = name;
			This.triggerType = triggerType;
			if ( ctrl != null )
				ctrl.FromSerialization( stringToObject );
		}
		
		public override void ToSerialization( core.DataObject dataObject )
		{
			ToSerialization_Base( (scene.SceneZoneTrigger)dataObject );
		}
		protected void ToSerialization_Base( scene.SceneZoneTrigger dataObject )
		{
			This = dataObject;	
			base.ToSerialization_Base( This );
			name = This.name;
			triggerType = This.triggerType;
			if ( This.ctrl != null )
			{
				ctrl = data.Serialization.ConstructSerialization<scene.Controller_Serialization>( This.ctrl.GetType() );
				ctrl.ToSerialization( This.ctrl );
			}
		}
		
	}

	[XmlType("Scene")]
	public class Scene_Serialization : core.ReferenceSerializationObject
	{
		[XmlIgnore]
		scene.Scene This;

		public scene.SceneObject_Serialization mainObject;

		[XmlArray]
		[XmlArrayItem(typeof(scene.SceneObject_Serialization),ElementName = "SceneObject")]
		[XmlArrayItem(typeof(scene.SceneMesh_Serialization),ElementName = "SceneMesh")]
		[XmlArrayItem(typeof(scene.SceneAnimMesh_Serialization),ElementName = "SceneAnimMesh")]
		[XmlArrayItem(typeof(scene.SceneZoneTrigger_Serialization),ElementName = "SceneZoneTrigger")]
		public scene.SceneObjectsCollection_Serialization objects = new scene.SceneObjectsCollection_Serialization();

		public override void CreateGuidToObjectMapping ( core.StringToObject stringToObject ) 
		{
			stringToObject.Add( GuidStr.ToOptGuid(), This );	
			CreateGuidToObjectMapping_Base( stringToObject );
		}
		protected override void CreateGuidToObjectMapping_Base ( core.StringToObject stringToObject )
		{
			base.CreateGuidToObjectMapping_Base( stringToObject );
			if ( mainObject != null )
				mainObject.CreateGuidToObjectMapping( stringToObject );
			if ( objects != null )
				objects.CreateGuidToObjectMapping( stringToObject );
		}
		
		public override void FromSerializationConstruct( core.DataObject dataObject )
		{
			FromSerializationConstruct_Base( (scene.Scene)dataObject );
		}
		protected void FromSerializationConstruct_Base( scene.Scene dataObject )
		{
			This = dataObject;
			base.FromSerializationConstruct_Base( This );
			if ( mainObject != null )
			{
				This.mainObject = data.Serialization.ConstructData<scene.SceneObject>( mainObject.GetType() );
				This.mainObject.parent = This;
				mainObject.FromSerializationConstruct( This.mainObject );
			}
			objects.FromSerializationConstruct( This.objects );
			foreach( scene.SceneObject collectionElement in This.objects )
			{
				collectionElement.parent = This;
			}
		}
		
		public override void FromSerialization( core.StringToObject stringToObject )
		{
			FromSerialization_Base( This, stringToObject );
		}
		protected void FromSerialization_Base( scene.Scene dataObject, core.StringToObject stringToObject )
		{
			base.FromSerialization_Base( This, stringToObject );	
			if ( mainObject != null )
				mainObject.FromSerialization( stringToObject );
			objects.FromSerialization( stringToObject );
		}
		
		public override void ToSerialization( core.DataObject dataObject )
		{
			ToSerialization_Base( (scene.Scene)dataObject );
		}
		protected void ToSerialization_Base( scene.Scene dataObject )
		{
			This = dataObject;	
			base.ToSerialization_Base( This );
			if ( This.mainObject != null )
			{
				mainObject = data.Serialization.ConstructSerialization<scene.SceneObject_Serialization>( This.mainObject.GetType() );
				mainObject.parent = this;
				mainObject.ToSerialization( This.mainObject );
			}
			objects.ToSerialization( This.objects );
			foreach ( scene.SceneObject_Serialization collectionElement in objects )
			{
				collectionElement.parent = this;
			}
		}
		
	}

	[XmlType("Controller")]
	public abstract class Controller_Serialization : core.ReferenceSerializationObject
	{
		[XmlIgnore]
		scene.Controller This;

		[DefaultValue(15)]
		public int priority = 15;

		public override void CreateGuidToObjectMapping ( core.StringToObject stringToObject ) 
		{
			stringToObject.Add( GuidStr.ToOptGuid(), This );	
			CreateGuidToObjectMapping_Base( stringToObject );
		}
		protected override void CreateGuidToObjectMapping_Base ( core.StringToObject stringToObject )
		{
			base.CreateGuidToObjectMapping_Base( stringToObject );
		}
		
		public override void FromSerializationConstruct( core.DataObject dataObject )
		{
			FromSerializationConstruct_Base( (scene.Controller)dataObject );
		}
		protected void FromSerializationConstruct_Base( scene.Controller dataObject )
		{
			This = dataObject;
			base.FromSerializationConstruct_Base( This );
		}
		
		public override void FromSerialization( core.StringToObject stringToObject )
		{
			FromSerialization_Base( This, stringToObject );
		}
		protected void FromSerialization_Base( scene.Controller dataObject, core.StringToObject stringToObject )
		{
			base.FromSerialization_Base( This, stringToObject );	
			This.priority = priority;
		}
		
		public override void ToSerialization( core.DataObject dataObject )
		{
			ToSerialization_Base( (scene.Controller)dataObject );
		}
		protected void ToSerialization_Base( scene.Controller dataObject )
		{
			This = dataObject;	
			base.ToSerialization_Base( This );
			priority = This.priority;
		}
		
	}

	[XmlType("ControllerBox")]
	public class ControllerBox_Serialization : scene.Controller_Serialization
	{
		[XmlIgnore]
		scene.ControllerBox This;

		public Vec3_Serialization size = new Vec3_Serialization ();

		public override void CreateGuidToObjectMapping ( core.StringToObject stringToObject ) 
		{
			stringToObject.Add( GuidStr.ToOptGuid(), This );	
			CreateGuidToObjectMapping_Base( stringToObject );
		}
		protected override void CreateGuidToObjectMapping_Base ( core.StringToObject stringToObject )
		{
			base.CreateGuidToObjectMapping_Base( stringToObject );
		}
		
		public override void FromSerializationConstruct( core.DataObject dataObject )
		{
			FromSerializationConstruct_Base( (scene.ControllerBox)dataObject );
		}
		protected void FromSerializationConstruct_Base( scene.ControllerBox dataObject )
		{
			This = dataObject;
			base.FromSerializationConstruct_Base( This );
			if ( size != null )
			{
				size.FromSerializationConstruct( This.size );
			}
		}
		
		public override void FromSerialization( core.StringToObject stringToObject )
		{
			FromSerialization_Base( This, stringToObject );
		}
		protected void FromSerialization_Base( scene.ControllerBox dataObject, core.StringToObject stringToObject )
		{
			base.FromSerialization_Base( This, stringToObject );	
			if ( size != null )
				size.FromSerialization( stringToObject );
		}
		
		public override void ToSerialization( core.DataObject dataObject )
		{
			ToSerialization_Base( (scene.ControllerBox)dataObject );
		}
		protected void ToSerialization_Base( scene.ControllerBox dataObject )
		{
			This = dataObject;	
			base.ToSerialization_Base( This );
			if ( This.size != null )
			{
				size = data.Serialization.ConstructSerialization<Vec3_Serialization>( This.size.GetType() );
				size.ToSerialization( This.size );
			}
		}
		
	}

	[XmlType("ControllerSphere")]
	public class ControllerSphere_Serialization : scene.Controller_Serialization
	{
		[XmlIgnore]
		scene.ControllerSphere This;

		[DefaultValue(1.5f)]
		public float radius = 1.5f;

		public override void CreateGuidToObjectMapping ( core.StringToObject stringToObject ) 
		{
			stringToObject.Add( GuidStr.ToOptGuid(), This );	
			CreateGuidToObjectMapping_Base( stringToObject );
		}
		protected override void CreateGuidToObjectMapping_Base ( core.StringToObject stringToObject )
		{
			base.CreateGuidToObjectMapping_Base( stringToObject );
		}
		
		public override void FromSerializationConstruct( core.DataObject dataObject )
		{
			FromSerializationConstruct_Base( (scene.ControllerSphere)dataObject );
		}
		protected void FromSerializationConstruct_Base( scene.ControllerSphere dataObject )
		{
			This = dataObject;
			base.FromSerializationConstruct_Base( This );
		}
		
		public override void FromSerialization( core.StringToObject stringToObject )
		{
			FromSerialization_Base( This, stringToObject );
		}
		protected void FromSerialization_Base( scene.ControllerSphere dataObject, core.StringToObject stringToObject )
		{
			base.FromSerialization_Base( This, stringToObject );	
			This.radius = radius;
		}
		
		public override void ToSerialization( core.DataObject dataObject )
		{
			ToSerialization_Base( (scene.ControllerSphere)dataObject );
		}
		protected void ToSerialization_Base( scene.ControllerSphere dataObject )
		{
			This = dataObject;	
			base.ToSerialization_Base( This );
			radius = This.radius;
		}
		
	}

} /* namespace scene */ 
